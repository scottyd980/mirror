%% script generated at {2016,11,18} {20,15,31}
{script,
    {"mirror","0.0.1"},
    [{preLoaded,
         [erl_prim_loader,erlang,erts_internal,init,otp_ring0,prim_eval,
          prim_file,prim_inet,prim_zip,zlib]},
     {progress,preloaded},
     {path,["$ERTS_LIB_DIR/kernel-4.2/ebin","$ERTS_LIB_DIR/stdlib-2.8/ebin"]},
     {primLoad,[error_handler]},
     {kernel_load_completed},
     {progress,kernel_load_completed},
     {path,["$ERTS_LIB_DIR/kernel-4.2/ebin"]},
     {primLoad,
         [application,application_controller,application_master,
          application_starter,auth,code,code_server,disk_log,disk_log_1,
          disk_log_server,disk_log_sup,dist_ac,dist_util,erl_boot_server,
          erl_ddll,erl_distribution,erl_epmd,erl_reply,error_logger,
          erts_debug,file,file_io_server,file_server,gen_sctp,gen_tcp,gen_udp,
          global,global_group,global_search,group,heart,hipe_unified_loader,
          inet,inet6_sctp,inet6_tcp,inet6_tcp_dist,inet6_udp,inet_config,
          inet_db,inet_dns,inet_gethost_native,inet_hosts,inet_parse,inet_res,
          inet_sctp,inet_tcp,inet_tcp_dist,inet_udp,kernel,kernel_config,net,
          net_adm,net_kernel,os,pg2,ram_file,rpc,seq_trace,standard_error,
          user,user_drv,user_sup,wrap_log_reader]},
     {path,["$ERTS_LIB_DIR/stdlib-2.8/ebin"]},
     {primLoad,
         [array,base64,beam_lib,binary,c,calendar,dets,dets_server,dets_sup,
          dets_utils,dets_v8,dets_v9,dict,digraph,digraph_utils,edlin,
          edlin_expand,epp,erl_anno,erl_bits,erl_compile,erl_eval,
          erl_expand_records,erl_internal,erl_lint,erl_parse,erl_posix_msg,
          erl_pp,erl_scan,erl_tar,error_logger_file_h,error_logger_tty_h,
          escript,ets,eval_bits,file_sorter,filelib,filename,gb_sets,gb_trees,
          gen,gen_event,gen_fsm,gen_server,io,io_lib,io_lib_format,
          io_lib_fread,io_lib_pretty,lib,lists,log_mf_h,maps,math,
          ms_transform,orddict,ordsets,otp_internal,pool,proc_lib,proplists,
          qlc,qlc_pt,queue,rand,random,re,sets,shell,shell_default,slave,sofs,
          string,supervisor,supervisor_bridge,sys,timer,unicode,win32reg,zip]},
     {path,["$ERTS_LIB_DIR/compiler-6.0.3/ebin"]},
     {primLoad,
         [beam_a,beam_asm,beam_block,beam_bool,beam_bsm,beam_clean,beam_dead,
          beam_dict,beam_disasm,beam_except,beam_flatten,beam_jump,
          beam_listing,beam_opcodes,beam_peep,beam_receive,beam_split,
          beam_trim,beam_type,beam_utils,beam_validator,beam_z,cerl,
          cerl_clauses,cerl_inline,cerl_sets,cerl_trees,compile,core_lib,
          core_lint,core_parse,core_pp,core_scan,erl_bifs,rec_env,
          sys_core_dsetel,sys_core_fold,sys_core_fold_lists,sys_core_inline,
          sys_pre_attributes,sys_pre_expand,v3_codegen,v3_core,v3_kernel,
          v3_kernel_pp,v3_life]},
     {path,["$ROOT/lib/elixir-1.3.1/ebin"]},
     {primLoad,
         ['Elixir.Access','Elixir.Agent','Elixir.Agent.Server',
          'Elixir.Application','Elixir.ArgumentError',
          'Elixir.ArithmeticError','Elixir.Atom','Elixir.BadArityError',
          'Elixir.BadFunctionError','Elixir.BadMapError',
          'Elixir.BadStructError','Elixir.Base','Elixir.Behaviour',
          'Elixir.Bitwise','Elixir.Calendar','Elixir.Calendar.ISO',
          'Elixir.CaseClauseError','Elixir.Code','Elixir.Code.LoadError',
          'Elixir.Collectable','Elixir.Collectable.BitString',
          'Elixir.Collectable.File.Stream','Elixir.Collectable.HashDict',
          'Elixir.Collectable.HashSet','Elixir.Collectable.IO.Stream',
          'Elixir.Collectable.List','Elixir.Collectable.Map',
          'Elixir.Collectable.MapSet','Elixir.CompileError',
          'Elixir.CondClauseError','Elixir.Date','Elixir.DateTime',
          'Elixir.Dict','Elixir.Enum','Elixir.Enum.EmptyError',
          'Elixir.Enum.OutOfBoundsError','Elixir.Enumerable',
          'Elixir.Enumerable.File.Stream','Elixir.Enumerable.Function',
          'Elixir.Enumerable.GenEvent.Stream','Elixir.Enumerable.HashDict',
          'Elixir.Enumerable.HashSet','Elixir.Enumerable.IO.Stream',
          'Elixir.Enumerable.List','Elixir.Enumerable.Map',
          'Elixir.Enumerable.MapSet','Elixir.Enumerable.Range',
          'Elixir.Enumerable.Stream','Elixir.ErlangError','Elixir.Exception',
          'Elixir.File','Elixir.File.CopyError','Elixir.File.Error',
          'Elixir.File.Stat','Elixir.File.Stream','Elixir.Float',
          'Elixir.FunctionClauseError','Elixir.GenEvent',
          'Elixir.GenEvent.Stream','Elixir.GenServer','Elixir.HashDict',
          'Elixir.HashSet','Elixir.IO','Elixir.IO.ANSI','Elixir.IO.ANSI.Docs',
          'Elixir.IO.ANSI.Sequence','Elixir.IO.Stream',
          'Elixir.IO.StreamError','Elixir.Inspect','Elixir.Inspect.Algebra',
          'Elixir.Inspect.Any','Elixir.Inspect.Atom',
          'Elixir.Inspect.BitString','Elixir.Inspect.Date',
          'Elixir.Inspect.Error','Elixir.Inspect.Float',
          'Elixir.Inspect.Function','Elixir.Inspect.HashDict',
          'Elixir.Inspect.HashSet','Elixir.Inspect.Integer',
          'Elixir.Inspect.List','Elixir.Inspect.Map','Elixir.Inspect.MapSet',
          'Elixir.Inspect.NaiveDateTime','Elixir.Inspect.Opts',
          'Elixir.Inspect.PID','Elixir.Inspect.Port','Elixir.Inspect.Range',
          'Elixir.Inspect.Reference','Elixir.Inspect.Regex',
          'Elixir.Inspect.Stream','Elixir.Inspect.Time',
          'Elixir.Inspect.Tuple','Elixir.Inspect.Version',
          'Elixir.Inspect.Version.Requirement','Elixir.Integer',
          'Elixir.Kernel','Elixir.Kernel.CLI','Elixir.Kernel.ErrorHandler',
          'Elixir.Kernel.LexicalTracker','Elixir.Kernel.ParallelCompiler',
          'Elixir.Kernel.ParallelRequire','Elixir.Kernel.SpecialForms',
          'Elixir.Kernel.Typespec','Elixir.Kernel.Utils','Elixir.KeyError',
          'Elixir.Keyword','Elixir.List','Elixir.List.Chars',
          'Elixir.List.Chars.Atom','Elixir.List.Chars.BitString',
          'Elixir.List.Chars.Float','Elixir.List.Chars.Integer',
          'Elixir.List.Chars.List','Elixir.Macro','Elixir.Macro.Env',
          'Elixir.Map','Elixir.MapSet','Elixir.MatchError','Elixir.Module',
          'Elixir.Module.LocalsTracker','Elixir.NaiveDateTime','Elixir.Node',
          'Elixir.OptionParser','Elixir.OptionParser.ParseError',
          'Elixir.Path','Elixir.Path.Wildcard','Elixir.Port','Elixir.Process',
          'Elixir.Protocol','Elixir.Protocol.UndefinedError','Elixir.Range',
          'Elixir.Record','Elixir.Record.Extractor','Elixir.Regex',
          'Elixir.Regex.CompileError','Elixir.RuntimeError','Elixir.Set',
          'Elixir.Stream','Elixir.Stream.Reducers','Elixir.String',
          'Elixir.String.Break','Elixir.String.Casing','Elixir.String.Chars',
          'Elixir.String.Chars.Atom','Elixir.String.Chars.BitString',
          'Elixir.String.Chars.Date','Elixir.String.Chars.DateTime',
          'Elixir.String.Chars.Float','Elixir.String.Chars.Integer',
          'Elixir.String.Chars.List','Elixir.String.Chars.NaiveDateTime',
          'Elixir.String.Chars.Time','Elixir.String.Chars.URI',
          'Elixir.String.Chars.Version',
          'Elixir.String.Chars.Version.Requirement',
          'Elixir.String.Normalizer','Elixir.String.Unicode',
          'Elixir.StringIO','Elixir.Supervisor','Elixir.Supervisor.Default',
          'Elixir.Supervisor.Spec','Elixir.SyntaxError','Elixir.System',
          'Elixir.SystemLimitError','Elixir.Task','Elixir.Task.Supervised',
          'Elixir.Task.Supervisor','Elixir.Time','Elixir.TokenMissingError',
          'Elixir.TryClauseError','Elixir.Tuple','Elixir.URI',
          'Elixir.UndefinedFunctionError','Elixir.UnicodeConversionError',
          'Elixir.Version','Elixir.Version.InvalidRequirementError',
          'Elixir.Version.InvalidVersionError','Elixir.Version.Parser',
          'Elixir.Version.Parser.DSL','Elixir.Version.Requirement',
          'Elixir.WithClauseError',elixir,elixir_aliases,elixir_bitstring,
          elixir_bootstrap,elixir_clauses,elixir_code_server,elixir_compiler,
          elixir_config,elixir_def,elixir_def_defaults,elixir_def_overridable,
          elixir_dispatch,elixir_env,elixir_errors,elixir_exp,
          elixir_exp_clauses,elixir_fn,elixir_for,elixir_import,
          elixir_interpolation,elixir_lexical,elixir_locals,elixir_map,
          elixir_module,elixir_parser,elixir_quote,elixir_rewrite,
          elixir_scope,elixir_sup,elixir_tokenizer,elixir_translator,
          elixir_try,elixir_utils,elixir_with]},
     {path,["$ROOT/lib/hashids-2.0.2/ebin"]},
     {primLoad,
         ['Elixir.Hashids','Elixir.Hashids.DecodingError',
          'Elixir.Hashids.Error','Elixir.Hashids.Helpers']},
     {path,["$ROOT/lib/inflex-1.7.0/ebin"]},
     {primLoad,
         ['Elixir.Inflex','Elixir.Inflex.Camelize','Elixir.Inflex.Ordinalize',
          'Elixir.Inflex.Parameterize','Elixir.Inflex.Pluralize',
          'Elixir.Inflex.Underscore']},
     {path,["$ROOT/lib/poison-2.2.0/ebin"]},
     {primLoad,
         ['Elixir.Poison','Elixir.Poison.Decode','Elixir.Poison.Decoder',
          'Elixir.Poison.Decoder.Any','Elixir.Poison.Encode',
          'Elixir.Poison.EncodeError','Elixir.Poison.Encoder',
          'Elixir.Poison.Encoder.Any','Elixir.Poison.Encoder.Atom',
          'Elixir.Poison.Encoder.BitString','Elixir.Poison.Encoder.Date',
          'Elixir.Poison.Encoder.DateTime','Elixir.Poison.Encoder.Float',
          'Elixir.Poison.Encoder.HashDict','Elixir.Poison.Encoder.HashSet',
          'Elixir.Poison.Encoder.Integer','Elixir.Poison.Encoder.List',
          'Elixir.Poison.Encoder.Map','Elixir.Poison.Encoder.MapSet',
          'Elixir.Poison.Encoder.NaiveDateTime','Elixir.Poison.Encoder.Range',
          'Elixir.Poison.Encoder.Stream','Elixir.Poison.Encoder.Time',
          'Elixir.Poison.Parser','Elixir.Poison.Pretty',
          'Elixir.Poison.SyntaxError']},
     {path,["$ROOT/lib/logger-1.3.1/ebin"]},
     {primLoad,
         ['Elixir.Logger','Elixir.Logger.App',
          'Elixir.Logger.Backends.Console','Elixir.Logger.Config',
          'Elixir.Logger.ErrorHandler','Elixir.Logger.Formatter',
          'Elixir.Logger.Translator','Elixir.Logger.Utils',
          'Elixir.Logger.Watcher']},
     {path,["$ROOT/lib/mime-1.0.1/ebin"]},
     {primLoad,['Elixir.MIME']},
     {path,["$ERTS_LIB_DIR/crypto-3.6.3/ebin"]},
     {primLoad,[crypto,crypto_ec_curves]},
     {path,["$ROOT/lib/plug-1.2.1/ebin"]},
     {primLoad,
         ['Elixir.Collectable.Plug.Conn','Elixir.Inspect.Plug.Conn',
          'Elixir.Plug','Elixir.Plug.Adapters.Cowboy',
          'Elixir.Plug.Adapters.Cowboy.Conn',
          'Elixir.Plug.Adapters.Cowboy.Handler',
          'Elixir.Plug.Adapters.Test.Conn','Elixir.Plug.Adapters.Translator',
          'Elixir.Plug.BadRequestError','Elixir.Plug.Builder',
          'Elixir.Plug.CSRFProtection',
          'Elixir.Plug.CSRFProtection.InvalidCSRFTokenError',
          'Elixir.Plug.CSRFProtection.InvalidCrossOriginRequestError',
          'Elixir.Plug.Conn','Elixir.Plug.Conn.Adapter',
          'Elixir.Plug.Conn.AlreadySentError',
          'Elixir.Plug.Conn.CookieOverflowError','Elixir.Plug.Conn.Cookies',
          'Elixir.Plug.Conn.InvalidHeaderError',
          'Elixir.Plug.Conn.InvalidQueryError',
          'Elixir.Plug.Conn.NotSentError','Elixir.Plug.Conn.Query',
          'Elixir.Plug.Conn.Status','Elixir.Plug.Conn.Unfetched',
          'Elixir.Plug.Conn.Utils','Elixir.Plug.Conn.WrapperError',
          'Elixir.Plug.Crypto','Elixir.Plug.Crypto.KeyGenerator',
          'Elixir.Plug.Crypto.MessageEncryptor',
          'Elixir.Plug.Crypto.MessageVerifier','Elixir.Plug.Debugger',
          'Elixir.Plug.ErrorHandler','Elixir.Plug.Exception',
          'Elixir.Plug.Exception.Any','Elixir.Plug.HTML','Elixir.Plug.Head',
          'Elixir.Plug.Logger','Elixir.Plug.MIME',
          'Elixir.Plug.MethodOverride','Elixir.Plug.Parsers',
          'Elixir.Plug.Parsers.BadEncodingError','Elixir.Plug.Parsers.JSON',
          'Elixir.Plug.Parsers.MULTIPART','Elixir.Plug.Parsers.ParseError',
          'Elixir.Plug.Parsers.RequestTooLargeError',
          'Elixir.Plug.Parsers.URLENCODED',
          'Elixir.Plug.Parsers.UnsupportedMediaTypeError',
          'Elixir.Plug.RequestId','Elixir.Plug.Router',
          'Elixir.Plug.Router.InvalidSpecError','Elixir.Plug.Router.Utils',
          'Elixir.Plug.SSL','Elixir.Plug.Session',
          'Elixir.Plug.Session.COOKIE','Elixir.Plug.Session.ETS',
          'Elixir.Plug.Session.Store','Elixir.Plug.Static',
          'Elixir.Plug.Static.InvalidPathError','Elixir.Plug.Supervisor',
          'Elixir.Plug.Test','Elixir.Plug.TimeoutError','Elixir.Plug.Upload',
          'Elixir.Plug.UploadError']},
     {path,["$ROOT/lib/ja_serializer-0.11.0/ebin"]},
     {primLoad,
         ['Elixir.JaSerializer',
          'Elixir.JaSerializer.AssociationNotLoadedError',
          'Elixir.JaSerializer.Builder',
          'Elixir.JaSerializer.Builder.Attribute',
          'Elixir.JaSerializer.Builder.Included',
          'Elixir.JaSerializer.Builder.Link',
          'Elixir.JaSerializer.Builder.Relationship',
          'Elixir.JaSerializer.Builder.ResourceIdentifier',
          'Elixir.JaSerializer.Builder.ResourceObject',
          'Elixir.JaSerializer.Builder.TopLevel',
          'Elixir.JaSerializer.ContentTypeNegotiation',
          'Elixir.JaSerializer.DSL','Elixir.JaSerializer.Deserializer',
          'Elixir.JaSerializer.EctoErrorSerializer',
          'Elixir.JaSerializer.ErrorSerializer',
          'Elixir.JaSerializer.Formatter','Elixir.JaSerializer.Formatter.Any',
          'Elixir.JaSerializer.Formatter.Atom',
          'Elixir.JaSerializer.Formatter.BitString',
          'Elixir.JaSerializer.Formatter.Decimal',
          'Elixir.JaSerializer.Formatter.Ecto.Date',
          'Elixir.JaSerializer.Formatter.Ecto.DateTime',
          'Elixir.JaSerializer.Formatter.Ecto.Time',
          'Elixir.JaSerializer.Formatter.Float',
          'Elixir.JaSerializer.Formatter.Integer',
          'Elixir.JaSerializer.Formatter.JaSerializer.Builder.Attribute',
          'Elixir.JaSerializer.Formatter.JaSerializer.Builder.Link',
          'Elixir.JaSerializer.Formatter.JaSerializer.Builder.Relationship',
          'Elixir.JaSerializer.Formatter.JaSerializer.Builder.ResourceIdentifier',
          'Elixir.JaSerializer.Formatter.JaSerializer.Builder.ResourceObject',
          'Elixir.JaSerializer.Formatter.JaSerializer.Builder.TopLevel',
          'Elixir.JaSerializer.Formatter.List',
          'Elixir.JaSerializer.Formatter.Utils',
          'Elixir.JaSerializer.ParamParser',
          'Elixir.JaSerializer.ParamParser.Any',
          'Elixir.JaSerializer.ParamParser.Atom',
          'Elixir.JaSerializer.ParamParser.BitString',
          'Elixir.JaSerializer.ParamParser.Float',
          'Elixir.JaSerializer.ParamParser.Integer',
          'Elixir.JaSerializer.ParamParser.List',
          'Elixir.JaSerializer.ParamParser.Map',
          'Elixir.JaSerializer.ParamParser.Plug.Upload',
          'Elixir.JaSerializer.ParamParser.Utils',
          'Elixir.JaSerializer.Params','Elixir.JaSerializer.PhoenixView',
          'Elixir.JaSerializer.Relationship',
          'Elixir.JaSerializer.Relationship.HasMany',
          'Elixir.JaSerializer.Relationship.HasOne',
          'Elixir.JaSerializer.Serializer']},
     {path,["$ROOT/lib/cors_plug-1.1.2/ebin"]},
     {primLoad,['Elixir.CORSPlug']},
     {path,["$ROOT/lib/uuid-1.1.5/ebin"]},
     {primLoad,['Elixir.UUID']},
     {path,["$ROOT/lib/base64url-0.0.1/ebin"]},
     {primLoad,[base64url]},
     {path,["$ERTS_LIB_DIR/asn1-4.0.2/ebin"]},
     {primLoad,[asn1rt,asn1rt_nif]},
     {path,["$ERTS_LIB_DIR/public_key-1.1.1/ebin"]},
     {primLoad,
         ['OTP-PUB-KEY','PKCS-FRAME',pubkey_cert,pubkey_cert_records,
          pubkey_crl,pubkey_pbe,pubkey_pem,pubkey_ssh,public_key]},
     {path,["$ROOT/lib/jose-1.8.0/ebin"]},
     {primLoad,
         ['Elixir.JOSE','Elixir.JOSE.JWA','Elixir.JOSE.JWE','Elixir.JOSE.JWK',
          'Elixir.JOSE.JWS','Elixir.JOSE.JWT','Elixir.JOSE.Poison',
          'Elixir.JOSE.Poison.LexicalEncode',
          'Elixir.JOSE.Poison.LexicalEncodeError',
          'Elixir.JOSE.Poison.LexicalEncoder',
          'Elixir.JOSE.Poison.LexicalEncoder.Any',
          'Elixir.JOSE.Poison.LexicalEncoder.Atom',
          'Elixir.JOSE.Poison.LexicalEncoder.BitString',
          'Elixir.JOSE.Poison.LexicalEncoder.Date',
          'Elixir.JOSE.Poison.LexicalEncoder.DateTime',
          'Elixir.JOSE.Poison.LexicalEncoder.Float',
          'Elixir.JOSE.Poison.LexicalEncoder.HashDict',
          'Elixir.JOSE.Poison.LexicalEncoder.HashSet',
          'Elixir.JOSE.Poison.LexicalEncoder.Integer',
          'Elixir.JOSE.Poison.LexicalEncoder.List',
          'Elixir.JOSE.Poison.LexicalEncoder.Map',
          'Elixir.JOSE.Poison.LexicalEncoder.MapSet',
          'Elixir.JOSE.Poison.LexicalEncoder.NaiveDateTime',
          'Elixir.JOSE.Poison.LexicalEncoder.Range',
          'Elixir.JOSE.Poison.LexicalEncoder.Stream',
          'Elixir.JOSE.Poison.LexicalEncoder.Time',
          'Elixir.JOSE.Poison.LexicalPretty',jose,jose_app,
          jose_block_encryptor,jose_chacha20_poly1305,
          jose_chacha20_poly1305_crypto,jose_chacha20_poly1305_libsodium,
          jose_chacha20_poly1305_unsupported,jose_curve25519,
          jose_curve25519_libdecaf,jose_curve25519_libsodium,
          jose_curve25519_unsupported,jose_curve448,jose_curve448_libdecaf,
          jose_curve448_unsupported,jose_json,jose_json_jiffy,jose_json_jsone,
          jose_json_jsx,jose_json_poison,jose_json_poison_compat_encoder,
          jose_json_poison_lexical_encoder,jose_json_unsupported,jose_jwa,
          jose_jwa_aes,jose_jwa_aes_kw,jose_jwa_bench,jose_jwa_chacha20,
          jose_jwa_chacha20_poly1305,jose_jwa_concat_kdf,jose_jwa_curve25519,
          jose_jwa_curve448,jose_jwa_ed25519,jose_jwa_ed448,jose_jwa_math,
          jose_jwa_pkcs1,jose_jwa_pkcs5,jose_jwa_pkcs7,jose_jwa_poly1305,
          jose_jwa_sha3,jose_jwa_unsupported,jose_jwa_x25519,jose_jwa_x448,
          jose_jwe,jose_jwe_alg,jose_jwe_alg_aes_kw,jose_jwe_alg_dir,
          jose_jwe_alg_ecdh_es,jose_jwe_alg_pbes2,jose_jwe_alg_rsa,
          jose_jwe_enc,jose_jwe_enc_aes,jose_jwe_enc_chacha20_poly1305,
          jose_jwe_zip,jose_jwk,jose_jwk_kty,jose_jwk_kty_ec,jose_jwk_kty_oct,
          jose_jwk_kty_okp_ed25519,jose_jwk_kty_okp_ed25519ph,
          jose_jwk_kty_okp_ed448,jose_jwk_kty_okp_ed448ph,
          jose_jwk_kty_okp_x25519,jose_jwk_kty_okp_x448,jose_jwk_kty_rsa,
          jose_jwk_oct,jose_jwk_openssh_key,jose_jwk_pem,jose_jwk_set,
          jose_jwk_use_enc,jose_jwk_use_sig,jose_jws,jose_jws_alg,
          jose_jws_alg_ecdsa,jose_jws_alg_eddsa,jose_jws_alg_hmac,
          jose_jws_alg_none,jose_jws_alg_poly1305,jose_jws_alg_rsa_pkcs1_v1_5,
          jose_jws_alg_rsa_pss,jose_jwt,jose_server,jose_sha3,
          jose_sha3_keccakf1600_driver,jose_sha3_keccakf1600_nif,
          jose_sha3_libdecaf,jose_sha3_unsupported,jose_sup]},
     {path,["$ROOT/lib/guardian-0.13.0/ebin"]},
     {primLoad,
         ['Elixir.Guardian','Elixir.Guardian.Channel',
          'Elixir.Guardian.ClaimValidation','Elixir.Guardian.Claims',
          'Elixir.Guardian.Hooks','Elixir.Guardian.Hooks.Default',
          'Elixir.Guardian.JWT','Elixir.Guardian.Keys',
          'Elixir.Guardian.Permissions','Elixir.Guardian.Phoenix.Controller',
          'Elixir.Guardian.Phoenix.Socket','Elixir.Guardian.Plug',
          'Elixir.Guardian.Plug.EnsureAuthenticated',
          'Elixir.Guardian.Plug.EnsureNotAuthenticated',
          'Elixir.Guardian.Plug.EnsurePermissions',
          'Elixir.Guardian.Plug.ErrorHandler',
          'Elixir.Guardian.Plug.LoadResource',
          'Elixir.Guardian.Plug.VerifyHeader',
          'Elixir.Guardian.Plug.VerifySession','Elixir.Guardian.Serializer',
          'Elixir.Guardian.Utils']},
     {path,["$ROOT/lib/fs-0.9.1/ebin"]},
     {primLoad,
         [fs,fs_app,fs_event_bridge,fs_server,fs_sup,fsevents,inotifywait,
          inotifywait_win32]},
     {path,["$ROOT/lib/eex-1.3.1/ebin"]},
     {primLoad,
         ['Elixir.EEx','Elixir.EEx.Compiler','Elixir.EEx.Engine',
          'Elixir.EEx.SmartEngine','Elixir.EEx.SyntaxError',
          'Elixir.EEx.Tokenizer']},
     {path,["$ROOT/lib/phoenix-1.2.1/ebin"]},
     {primLoad,
         ['Elixir.Mix.Phoenix','Elixir.Mix.Tasks.Compile.Phoenix',
          'Elixir.Mix.Tasks.Phoenix.Digest',
          'Elixir.Mix.Tasks.Phoenix.Gen.Channel',
          'Elixir.Mix.Tasks.Phoenix.Gen.Html',
          'Elixir.Mix.Tasks.Phoenix.Gen.Json',
          'Elixir.Mix.Tasks.Phoenix.Gen.Model',
          'Elixir.Mix.Tasks.Phoenix.Gen.Presence',
          'Elixir.Mix.Tasks.Phoenix.Gen.Secret',
          'Elixir.Mix.Tasks.Phoenix.Routes','Elixir.Mix.Tasks.Phoenix.Server',
          'Elixir.Phoenix','Elixir.Phoenix.ActionClauseError',
          'Elixir.Phoenix.Channel','Elixir.Phoenix.Channel.Server',
          'Elixir.Phoenix.ChannelTest',
          'Elixir.Phoenix.ChannelTest.NoopSerializer',
          'Elixir.Phoenix.CodeReloader','Elixir.Phoenix.CodeReloader.Proxy',
          'Elixir.Phoenix.CodeReloader.Server','Elixir.Phoenix.Config',
          'Elixir.Phoenix.ConnTest','Elixir.Phoenix.Controller',
          'Elixir.Phoenix.Controller.Pipeline','Elixir.Phoenix.Digester',
          'Elixir.Phoenix.Endpoint','Elixir.Phoenix.Endpoint.Adapter',
          'Elixir.Phoenix.Endpoint.CowboyHandler',
          'Elixir.Phoenix.Endpoint.CowboyWebSocket',
          'Elixir.Phoenix.Endpoint.Handler',
          'Elixir.Phoenix.Endpoint.Instrument',
          'Elixir.Phoenix.Endpoint.RenderErrors',
          'Elixir.Phoenix.Endpoint.Server','Elixir.Phoenix.Endpoint.Watcher',
          'Elixir.Phoenix.Logger','Elixir.Phoenix.MissingParamError',
          'Elixir.Phoenix.Naming','Elixir.Phoenix.NotAcceptableError',
          'Elixir.Phoenix.Param','Elixir.Phoenix.Param.Any',
          'Elixir.Phoenix.Param.Atom','Elixir.Phoenix.Param.BitString',
          'Elixir.Phoenix.Param.Integer','Elixir.Phoenix.Param.Map',
          'Elixir.Phoenix.Presence','Elixir.Phoenix.Router',
          'Elixir.Phoenix.Router.ConsoleFormatter',
          'Elixir.Phoenix.Router.Helpers',
          'Elixir.Phoenix.Router.NoRouteError',
          'Elixir.Phoenix.Router.Resource','Elixir.Phoenix.Router.Route',
          'Elixir.Phoenix.Router.Scope','Elixir.Phoenix.Socket',
          'Elixir.Phoenix.Socket.Broadcast',
          'Elixir.Phoenix.Socket.InvalidMessageError',
          'Elixir.Phoenix.Socket.Message','Elixir.Phoenix.Socket.Reply',
          'Elixir.Phoenix.Socket.Transport','Elixir.Phoenix.Supervisor',
          'Elixir.Phoenix.Template','Elixir.Phoenix.Template.EExEngine',
          'Elixir.Phoenix.Template.Engine',
          'Elixir.Phoenix.Template.ExsEngine','Elixir.Phoenix.Template.HTML',
          'Elixir.Phoenix.Template.UndefinedError','Elixir.Phoenix.Token',
          'Elixir.Phoenix.Transports.LongPoll',
          'Elixir.Phoenix.Transports.LongPoll.Server',
          'Elixir.Phoenix.Transports.LongPoll.Supervisor',
          'Elixir.Phoenix.Transports.LongPollSerializer',
          'Elixir.Phoenix.Transports.Serializer',
          'Elixir.Phoenix.Transports.WebSocket',
          'Elixir.Phoenix.Transports.WebSocketSerializer',
          'Elixir.Phoenix.View']},
     {path,["$ROOT/lib/phoenix_live_reload-1.0.5/ebin"]},
     {primLoad,
         ['Elixir.Phoenix.LiveReload.Channel','Elixir.Phoenix.LiveReloader',
          'Elixir.Phoenix.LiveReloader.Socket']},
     {path,["$ROOT/lib/comeonin-2.5.3/ebin"]},
     {primLoad,
         ['Elixir.Comeonin','Elixir.Comeonin.Bcrypt',
          'Elixir.Comeonin.Bcrypt.Base64','Elixir.Comeonin.Config',
          'Elixir.Comeonin.Otp','Elixir.Comeonin.Pbkdf2',
          'Elixir.Comeonin.Pbkdf2.Base64','Elixir.Comeonin.Tools']},
     {path,["$ROOT/lib/connection-1.0.4/ebin"]},
     {primLoad,['Elixir.Connection']},
     {path,["$ROOT/lib/db_connection-1.0.0-rc.5/ebin"]},
     {primLoad,
         ['Elixir.DBConnection','Elixir.DBConnection.App',
          'Elixir.DBConnection.Backoff','Elixir.DBConnection.Connection',
          'Elixir.DBConnection.ConnectionError',
          'Elixir.DBConnection.LogEntry','Elixir.DBConnection.Ownership',
          'Elixir.DBConnection.Ownership.Manager',
          'Elixir.DBConnection.Ownership.Pool',
          'Elixir.DBConnection.Ownership.PoolSupervisor',
          'Elixir.DBConnection.Ownership.Proxy',
          'Elixir.DBConnection.Ownership.ProxySupervisor',
          'Elixir.DBConnection.OwnershipError','Elixir.DBConnection.Pool',
          'Elixir.DBConnection.Poolboy','Elixir.DBConnection.Poolboy.Worker',
          'Elixir.DBConnection.Query','Elixir.DBConnection.Sojourn',
          'Elixir.DBConnection.Sojourn.Broker',
          'Elixir.DBConnection.Sojourn.Pool',
          'Elixir.DBConnection.Sojourn.Regulator',
          'Elixir.DBConnection.Sojourn.Starter',
          'Elixir.DBConnection.Sojourn.Supervisor',
          'Elixir.DBConnection.SojournError','Elixir.DBConnection.Task',
          'Elixir.DBConnection.Watcher']},
     {path,["$ROOT/lib/decimal-1.2.0/ebin"]},
     {primLoad,
         ['Elixir.Decimal','Elixir.Decimal.Context','Elixir.Decimal.Error',
          'Elixir.Inspect.Decimal','Elixir.String.Chars.Decimal']},
     {path,["$ROOT/lib/mariaex-0.7.8/ebin"]},
     {primLoad,
         ['Elixir.DBConnection.Query.Mariaex.Query','Elixir.Mariaex',
          'Elixir.Mariaex.Cache','Elixir.Mariaex.Coder',
          'Elixir.Mariaex.Coder.Utils','Elixir.Mariaex.Column',
          'Elixir.Mariaex.Connection','Elixir.Mariaex.Connection.Ssl',
          'Elixir.Mariaex.Connection.Tcp','Elixir.Mariaex.Error',
          'Elixir.Mariaex.LruCache','Elixir.Mariaex.Messages',
          'Elixir.Mariaex.Protocol','Elixir.Mariaex.ProtocolHelper',
          'Elixir.Mariaex.Query','Elixir.Mariaex.Result',
          'Elixir.String.Chars.Mariaex.Query']},
     {path,["$ROOT/lib/poolboy-1.5.1/ebin"]},
     {primLoad,[poolboy,poolboy_sup,poolboy_worker]},
     {path,["$ROOT/lib/ecto-2.0.5/ebin"]},
     {primLoad,
         ['Elixir.Ecto','Elixir.Ecto.Adapter','Elixir.Ecto.Adapter.Migration',
          'Elixir.Ecto.Adapter.Storage','Elixir.Ecto.Adapter.Structure',
          'Elixir.Ecto.Adapter.Transaction','Elixir.Ecto.Adapters.MySQL',
          'Elixir.Ecto.Adapters.MySQL.Connection',
          'Elixir.Ecto.Adapters.Postgres','Elixir.Ecto.Adapters.SQL',
          'Elixir.Ecto.Adapters.SQL.Connection',
          'Elixir.Ecto.Adapters.SQL.Sandbox',
          'Elixir.Ecto.Adapters.SQL.Sandbox.Connection',
          'Elixir.Ecto.Adapters.SQL.Sandbox.Pool','Elixir.Ecto.Application',
          'Elixir.Ecto.Association','Elixir.Ecto.Association.BelongsTo',
          'Elixir.Ecto.Association.Has','Elixir.Ecto.Association.HasThrough',
          'Elixir.Ecto.Association.ManyToMany',
          'Elixir.Ecto.Association.NotLoaded','Elixir.Ecto.CastError',
          'Elixir.Ecto.ChangeError','Elixir.Ecto.Changeset',
          'Elixir.Ecto.Changeset.Relation','Elixir.Ecto.ConstraintError',
          'Elixir.Ecto.DataType','Elixir.Ecto.DataType.Any',
          'Elixir.Ecto.DataType.Ecto.Date',
          'Elixir.Ecto.DataType.Ecto.DateTime',
          'Elixir.Ecto.DataType.Ecto.Time','Elixir.Ecto.DataType.List',
          'Elixir.Ecto.Date','Elixir.Ecto.DateTime',
          'Elixir.Ecto.DateTime.Utils','Elixir.Ecto.Embedded',
          'Elixir.Ecto.InvalidChangesetError','Elixir.Ecto.InvalidURLError',
          'Elixir.Ecto.LogEntry','Elixir.Ecto.Migration',
          'Elixir.Ecto.Migration.Constraint','Elixir.Ecto.Migration.Index',
          'Elixir.Ecto.Migration.Reference','Elixir.Ecto.Migration.Runner',
          'Elixir.Ecto.Migration.SchemaMigration',
          'Elixir.Ecto.Migration.Supervisor','Elixir.Ecto.Migration.Table',
          'Elixir.Ecto.MigrationError','Elixir.Ecto.Migrator',
          'Elixir.Ecto.Model','Elixir.Ecto.Multi',
          'Elixir.Ecto.MultipleResultsError',
          'Elixir.Ecto.NoPrimaryKeyFieldError',
          'Elixir.Ecto.NoPrimaryKeyValueError','Elixir.Ecto.NoResultsError',
          'Elixir.Ecto.Query','Elixir.Ecto.Query.API',
          'Elixir.Ecto.Query.Builder','Elixir.Ecto.Query.Builder.Distinct',
          'Elixir.Ecto.Query.Builder.Filter','Elixir.Ecto.Query.Builder.From',
          'Elixir.Ecto.Query.Builder.GroupBy',
          'Elixir.Ecto.Query.Builder.Join',
          'Elixir.Ecto.Query.Builder.LimitOffset',
          'Elixir.Ecto.Query.Builder.Lock',
          'Elixir.Ecto.Query.Builder.OrderBy',
          'Elixir.Ecto.Query.Builder.Preload',
          'Elixir.Ecto.Query.Builder.Select',
          'Elixir.Ecto.Query.Builder.Update','Elixir.Ecto.Query.CastError',
          'Elixir.Ecto.Query.CompileError','Elixir.Ecto.Query.JoinExpr',
          'Elixir.Ecto.Query.Planner','Elixir.Ecto.Query.QueryExpr',
          'Elixir.Ecto.Query.SelectExpr','Elixir.Ecto.Query.Tagged',
          'Elixir.Ecto.QueryError','Elixir.Ecto.Queryable',
          'Elixir.Ecto.Queryable.Atom','Elixir.Ecto.Queryable.BitString',
          'Elixir.Ecto.Queryable.Ecto.Query',
          'Elixir.Ecto.Queryable.Ecto.SubQuery','Elixir.Ecto.Queryable.Tuple',
          'Elixir.Ecto.Repo','Elixir.Ecto.Repo.Assoc',
          'Elixir.Ecto.Repo.Preloader','Elixir.Ecto.Repo.Queryable',
          'Elixir.Ecto.Repo.Schema','Elixir.Ecto.Repo.Supervisor',
          'Elixir.Ecto.Schema','Elixir.Ecto.Schema.Metadata',
          'Elixir.Ecto.StaleEntryError','Elixir.Ecto.SubQuery',
          'Elixir.Ecto.SubQueryError','Elixir.Ecto.Time','Elixir.Ecto.Type',
          'Elixir.Ecto.UUID','Elixir.Inspect.Ecto.Association.NotLoaded',
          'Elixir.Inspect.Ecto.Changeset','Elixir.Inspect.Ecto.Date',
          'Elixir.Inspect.Ecto.DateTime','Elixir.Inspect.Ecto.Query',
          'Elixir.Inspect.Ecto.Schema.Metadata','Elixir.Inspect.Ecto.Time',
          'Elixir.Mix.Ecto','Elixir.Mix.Tasks.Ecto',
          'Elixir.Mix.Tasks.Ecto.Create','Elixir.Mix.Tasks.Ecto.Drop',
          'Elixir.Mix.Tasks.Ecto.Dump','Elixir.Mix.Tasks.Ecto.Gen.Migration',
          'Elixir.Mix.Tasks.Ecto.Gen.Repo','Elixir.Mix.Tasks.Ecto.Load',
          'Elixir.Mix.Tasks.Ecto.Migrate','Elixir.Mix.Tasks.Ecto.Migrations',
          'Elixir.Mix.Tasks.Ecto.Rollback','Elixir.Poison.Encoder.Decimal',
          'Elixir.Poison.Encoder.Ecto.Association.NotLoaded',
          'Elixir.Poison.Encoder.Ecto.Date',
          'Elixir.Poison.Encoder.Ecto.DateTime',
          'Elixir.Poison.Encoder.Ecto.Time','Elixir.String.Chars.Ecto.Date',
          'Elixir.String.Chars.Ecto.DateTime',
          'Elixir.String.Chars.Ecto.Time']},
     {path,["$ROOT/lib/phoenix_ecto-3.0.1/ebin"]},
     {primLoad,
         ['Elixir.Phoenix.Ecto','Elixir.Phoenix.Ecto.SQL.Sandbox',
          'Elixir.Plug.Exception.Ecto.CastError',
          'Elixir.Plug.Exception.Ecto.NoResultsError',
          'Elixir.Plug.Exception.Ecto.Query.CastError']},
     {path,["$ROOT/lib/gettext-0.11.0/ebin"]},
     {primLoad,
         ['Elixir.Gettext','Elixir.Gettext.Backend','Elixir.Gettext.Compiler',
          'Elixir.Gettext.Error','Elixir.Gettext.Extractor',
          'Elixir.Gettext.ExtractorAgent','Elixir.Gettext.Fuzzy',
          'Elixir.Gettext.Interpolation','Elixir.Gettext.Merger',
          'Elixir.Gettext.PO','Elixir.Gettext.PO.Parser',
          'Elixir.Gettext.PO.PluralTranslation',
          'Elixir.Gettext.PO.SyntaxError','Elixir.Gettext.PO.Tokenizer',
          'Elixir.Gettext.PO.Translation','Elixir.Gettext.PO.Translations',
          'Elixir.Gettext.Plural','Elixir.Gettext.Plural.UnknownLocaleError',
          'Elixir.Mix.Tasks.Compile.Gettext',
          'Elixir.Mix.Tasks.Gettext.Extract','Elixir.Mix.Tasks.Gettext.Merge',
          gettext_po_parser]},
     {path,["$ROOT/lib/cowlib-1.0.2/ebin"]},
     {primLoad,
         [cow_cookie,cow_date,cow_http,cow_http_hd,cow_http_te,cow_mimetypes,
          cow_multipart,cow_qs,cow_spdy]},
     {path,["$ROOT/lib/ranch-1.2.1/ebin"]},
     {primLoad,
         [ranch,ranch_acceptor,ranch_acceptors_sup,ranch_app,ranch_conns_sup,
          ranch_listener_sup,ranch_protocol,ranch_server,ranch_ssl,ranch_sup,
          ranch_tcp,ranch_transport]},
     {path,["$ROOT/lib/cowboy-1.0.4/ebin"]},
     {primLoad,
         [cowboy,cowboy_app,cowboy_bstr,cowboy_clock,cowboy_handler,
          cowboy_http,cowboy_http_handler,cowboy_loop_handler,
          cowboy_middleware,cowboy_protocol,cowboy_req,cowboy_rest,
          cowboy_router,cowboy_spdy,cowboy_static,cowboy_sub_protocol,
          cowboy_sup,cowboy_websocket,cowboy_websocket_handler]},
     {path,["$ROOT/lib/phoenix_pubsub-1.0.1/ebin"]},
     {primLoad,
         ['Elixir.Phoenix.PubSub','Elixir.Phoenix.PubSub.BroadcastError',
          'Elixir.Phoenix.PubSub.GC','Elixir.Phoenix.PubSub.Local',
          'Elixir.Phoenix.PubSub.LocalSupervisor','Elixir.Phoenix.PubSub.PG2',
          'Elixir.Phoenix.PubSub.PG2Server',
          'Elixir.Phoenix.PubSub.Supervisor','Elixir.Phoenix.Tracker',
          'Elixir.Phoenix.Tracker.Clock',
          'Elixir.Phoenix.Tracker.DeltaGeneration',
          'Elixir.Phoenix.Tracker.Replica','Elixir.Phoenix.Tracker.State']},
     {path,["$ROOT/lib/mirror-0.0.1/ebin"]},
     {primLoad,
         ['Elixir.Mirror','Elixir.Mirror.AuthErrorHandler',
          'Elixir.Mirror.ChangesetView','Elixir.Mirror.Endpoint',
          'Elixir.Mirror.ErrorHelpers','Elixir.Mirror.ErrorView',
          'Elixir.Mirror.Gettext','Elixir.Mirror.GuardianSerializer',
          'Elixir.Mirror.MemberDelegate',
          'Elixir.Mirror.RegistrationController','Elixir.Mirror.Repo',
          'Elixir.Mirror.Retrospective','Elixir.Mirror.RetrospectiveChannel',
          'Elixir.Mirror.RetrospectiveType','Elixir.Mirror.RetrospectiveUser',
          'Elixir.Mirror.Router','Elixir.Mirror.Router.Helpers',
          'Elixir.Mirror.SessionController','Elixir.Mirror.Team',
          'Elixir.Mirror.TeamAdmin','Elixir.Mirror.TeamAdminController',
          'Elixir.Mirror.TeamAdminView','Elixir.Mirror.TeamChannel',
          'Elixir.Mirror.TeamController','Elixir.Mirror.TeamView',
          'Elixir.Mirror.User','Elixir.Mirror.UserController',
          'Elixir.Mirror.UserHelper','Elixir.Mirror.UserSocket',
          'Elixir.Mirror.UserTeam','Elixir.Mirror.UserTeamController',
          'Elixir.Mirror.UserTeamView','Elixir.Mirror.UserView',
          'Elixir.Mirror.Web']},
     {path,["$ROOT/lib/iex-1.3.1/ebin"]},
     {primLoad,
         ['Elixir.IEx','Elixir.IEx.App','Elixir.IEx.Autocomplete',
          'Elixir.IEx.CLI','Elixir.IEx.Config','Elixir.IEx.Evaluator',
          'Elixir.IEx.Helpers','Elixir.IEx.History',
          'Elixir.IEx.History.State','Elixir.IEx.Info','Elixir.IEx.Info.Any',
          'Elixir.IEx.Info.Atom','Elixir.IEx.Info.BitString',
          'Elixir.IEx.Info.Float','Elixir.IEx.Info.Function',
          'Elixir.IEx.Info.Integer','Elixir.IEx.Info.List',
          'Elixir.IEx.Info.Map','Elixir.IEx.Info.PID','Elixir.IEx.Info.Port',
          'Elixir.IEx.Info.Reference','Elixir.IEx.Info.Tuple',
          'Elixir.IEx.Introspection','Elixir.IEx.Remsh','Elixir.IEx.Server',
          'Elixir.IEx.State']},
     {path,["$ERTS_LIB_DIR/sasl-2.7/ebin"]},
     {primLoad,
         [alarm_handler,erlsrv,format_lib_supp,misc_supp,overload,rb,
          rb_format_supp,release_handler,release_handler_1,sasl,sasl_report,
          sasl_report_file_h,sasl_report_tty_h,si,si_sasl_supp,systools,
          systools_lib,systools_make,systools_rc,systools_relup]},
     {progress,modules_loaded},
     {path,
         ["$ERTS_LIB_DIR/kernel-4.2/ebin","$ERTS_LIB_DIR/stdlib-2.8/ebin",
          "$ERTS_LIB_DIR/compiler-6.0.3/ebin","$ROOT/lib/elixir-1.3.1/ebin",
          "$ROOT/lib/hashids-2.0.2/ebin","$ROOT/lib/inflex-1.7.0/ebin",
          "$ROOT/lib/poison-2.2.0/ebin","$ROOT/lib/logger-1.3.1/ebin",
          "$ROOT/lib/mime-1.0.1/ebin","$ERTS_LIB_DIR/crypto-3.6.3/ebin",
          "$ROOT/lib/plug-1.2.1/ebin","$ROOT/lib/ja_serializer-0.11.0/ebin",
          "$ROOT/lib/cors_plug-1.1.2/ebin","$ROOT/lib/uuid-1.1.5/ebin",
          "$ROOT/lib/base64url-0.0.1/ebin","$ERTS_LIB_DIR/asn1-4.0.2/ebin",
          "$ERTS_LIB_DIR/public_key-1.1.1/ebin","$ROOT/lib/jose-1.8.0/ebin",
          "$ROOT/lib/guardian-0.13.0/ebin","$ROOT/lib/fs-0.9.1/ebin",
          "$ROOT/lib/eex-1.3.1/ebin","$ROOT/lib/phoenix-1.2.1/ebin",
          "$ROOT/lib/phoenix_live_reload-1.0.5/ebin",
          "$ROOT/lib/comeonin-2.5.3/ebin","$ROOT/lib/connection-1.0.4/ebin",
          "$ROOT/lib/db_connection-1.0.0-rc.5/ebin",
          "$ROOT/lib/decimal-1.2.0/ebin","$ROOT/lib/mariaex-0.7.8/ebin",
          "$ROOT/lib/poolboy-1.5.1/ebin","$ROOT/lib/ecto-2.0.5/ebin",
          "$ROOT/lib/phoenix_ecto-3.0.1/ebin","$ROOT/lib/gettext-0.11.0/ebin",
          "$ROOT/lib/cowlib-1.0.2/ebin","$ROOT/lib/ranch-1.2.1/ebin",
          "$ROOT/lib/cowboy-1.0.4/ebin","$ROOT/lib/phoenix_pubsub-1.0.1/ebin",
          "$ROOT/lib/mirror-0.0.1/ebin","$ROOT/lib/iex-1.3.1/ebin",
          "$ERTS_LIB_DIR/sasl-2.7/ebin"]},
     {kernelProcess,heart,{heart,start,[]}},
     {kernelProcess,error_logger,{error_logger,start_link,[]}},
     {kernelProcess,application_controller,
         {application_controller,start,
             [{application,kernel,
                  [{description,"ERTS  CXC 138 10"},
                   {vsn,"4.2"},
                   {id,[]},
                   {modules,
                       [application,application_controller,application_master,
                        application_starter,auth,code,code_server,dist_util,
                        erl_boot_server,erl_distribution,erl_reply,
                        error_handler,error_logger,file,file_server,
                        file_io_server,global,global_group,global_search,
                        group,heart,hipe_unified_loader,inet6_tcp,
                        inet6_tcp_dist,inet6_udp,inet6_sctp,inet_config,
                        inet_hosts,inet_gethost_native,inet_tcp_dist,kernel,
                        kernel_config,net,net_adm,net_kernel,os,ram_file,rpc,
                        user,user_drv,user_sup,disk_log,disk_log_1,
                        disk_log_server,disk_log_sup,dist_ac,erl_ddll,
                        erl_epmd,erts_debug,gen_tcp,gen_udp,gen_sctp,inet,
                        inet_db,inet_dns,inet_parse,inet_res,inet_tcp,
                        inet_udp,inet_sctp,pg2,seq_trace,standard_error,
                        wrap_log_reader]},
                   {registered,
                       [application_controller,erl_reply,auth,boot_server,
                        code_server,disk_log_server,disk_log_sup,
                        erl_prim_loader,error_logger,file_server_2,
                        fixtable_server,global_group,global_name_server,heart,
                        init,kernel_config,kernel_sup,net_kernel,net_sup,rex,
                        user,os_server,ddll_server,erl_epmd,inet_db,pg2]},
                   {applications,[]},
                   {included_applications,[]},
                   {env,[{error_logger,tty}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{kernel,[]}}]}]}},
     {progress,init_kernel_started},
     {apply,
         {application,load,
             [{application,stdlib,
                  [{description,"ERTS  CXC 138 10"},
                   {vsn,"2.8"},
                   {id,[]},
                   {modules,
                       [array,base64,beam_lib,binary,c,calendar,dets,
                        dets_server,dets_sup,dets_utils,dets_v8,dets_v9,dict,
                        digraph,digraph_utils,edlin,edlin_expand,epp,
                        eval_bits,erl_anno,erl_bits,erl_compile,erl_eval,
                        erl_expand_records,erl_internal,erl_lint,erl_parse,
                        erl_posix_msg,erl_pp,erl_scan,erl_tar,
                        error_logger_file_h,error_logger_tty_h,escript,ets,
                        file_sorter,filelib,filename,gb_trees,gb_sets,gen,
                        gen_event,gen_fsm,gen_server,io,io_lib,io_lib_format,
                        io_lib_fread,io_lib_pretty,lib,lists,log_mf_h,maps,
                        math,ms_transform,orddict,ordsets,otp_internal,pool,
                        proc_lib,proplists,qlc,qlc_pt,queue,rand,random,re,
                        sets,shell,shell_default,slave,sofs,string,supervisor,
                        supervisor_bridge,sys,timer,unicode,win32reg,zip]},
                   {registered,
                       [timer_server,rsh_starter,take_over_monitor,
                        pool_master,dets]},
                   {applications,[kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,compiler,
                  [{description,"ERTS  CXC 138 10"},
                   {vsn,"6.0.3"},
                   {id,[]},
                   {modules,
                       [beam_a,beam_asm,beam_block,beam_bool,beam_bsm,
                        beam_clean,beam_dead,beam_dict,beam_disasm,
                        beam_except,beam_flatten,beam_jump,beam_listing,
                        beam_opcodes,beam_peep,beam_receive,beam_split,
                        beam_trim,beam_type,beam_utils,beam_validator,beam_z,
                        cerl,cerl_clauses,cerl_inline,cerl_sets,cerl_trees,
                        compile,core_scan,core_lint,core_parse,core_pp,
                        core_lib,erl_bifs,rec_env,sys_core_dsetel,
                        sys_core_fold,sys_core_fold_lists,sys_core_inline,
                        sys_pre_attributes,sys_pre_expand,v3_codegen,v3_core,
                        v3_kernel,v3_kernel_pp,v3_life]},
                   {registered,[]},
                   {applications,[stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,elixir,
                  [{description,"elixir"},
                   {vsn,"1.3.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Access','Elixir.Agent','Elixir.Agent.Server',
                        'Elixir.Application','Elixir.ArgumentError',
                        'Elixir.ArithmeticError','Elixir.Atom',
                        'Elixir.BadArityError','Elixir.BadFunctionError',
                        'Elixir.BadMapError','Elixir.BadStructError',
                        'Elixir.Base','Elixir.Behaviour','Elixir.Bitwise',
                        'Elixir.Calendar','Elixir.Calendar.ISO',
                        'Elixir.CaseClauseError','Elixir.Code',
                        'Elixir.Code.LoadError','Elixir.Collectable',
                        'Elixir.Collectable.BitString',
                        'Elixir.Collectable.File.Stream',
                        'Elixir.Collectable.HashDict',
                        'Elixir.Collectable.HashSet',
                        'Elixir.Collectable.IO.Stream',
                        'Elixir.Collectable.List','Elixir.Collectable.Map',
                        'Elixir.Collectable.MapSet','Elixir.CompileError',
                        'Elixir.CondClauseError','Elixir.Date',
                        'Elixir.DateTime','Elixir.Dict','Elixir.Enum',
                        'Elixir.Enum.EmptyError',
                        'Elixir.Enum.OutOfBoundsError','Elixir.Enumerable',
                        'Elixir.Enumerable.File.Stream',
                        'Elixir.Enumerable.Function',
                        'Elixir.Enumerable.GenEvent.Stream',
                        'Elixir.Enumerable.HashDict',
                        'Elixir.Enumerable.HashSet',
                        'Elixir.Enumerable.IO.Stream',
                        'Elixir.Enumerable.List','Elixir.Enumerable.Map',
                        'Elixir.Enumerable.MapSet','Elixir.Enumerable.Range',
                        'Elixir.Enumerable.Stream','Elixir.ErlangError',
                        'Elixir.Exception','Elixir.File',
                        'Elixir.File.CopyError','Elixir.File.Error',
                        'Elixir.File.Stat','Elixir.File.Stream',
                        'Elixir.Float','Elixir.FunctionClauseError',
                        'Elixir.GenEvent','Elixir.GenEvent.Stream',
                        'Elixir.GenServer','Elixir.HashDict','Elixir.HashSet',
                        'Elixir.IO','Elixir.IO.ANSI','Elixir.IO.ANSI.Docs',
                        'Elixir.IO.ANSI.Sequence','Elixir.IO.Stream',
                        'Elixir.IO.StreamError','Elixir.Inspect',
                        'Elixir.Inspect.Algebra','Elixir.Inspect.Any',
                        'Elixir.Inspect.Atom','Elixir.Inspect.BitString',
                        'Elixir.Inspect.Date','Elixir.Inspect.Error',
                        'Elixir.Inspect.Float','Elixir.Inspect.Function',
                        'Elixir.Inspect.HashDict','Elixir.Inspect.HashSet',
                        'Elixir.Inspect.Integer','Elixir.Inspect.List',
                        'Elixir.Inspect.Map','Elixir.Inspect.MapSet',
                        'Elixir.Inspect.NaiveDateTime','Elixir.Inspect.Opts',
                        'Elixir.Inspect.PID','Elixir.Inspect.Port',
                        'Elixir.Inspect.Range','Elixir.Inspect.Reference',
                        'Elixir.Inspect.Regex','Elixir.Inspect.Stream',
                        'Elixir.Inspect.Time','Elixir.Inspect.Tuple',
                        'Elixir.Inspect.Version',
                        'Elixir.Inspect.Version.Requirement','Elixir.Integer',
                        'Elixir.Kernel','Elixir.Kernel.CLI',
                        'Elixir.Kernel.ErrorHandler',
                        'Elixir.Kernel.LexicalTracker',
                        'Elixir.Kernel.ParallelCompiler',
                        'Elixir.Kernel.ParallelRequire',
                        'Elixir.Kernel.SpecialForms','Elixir.Kernel.Typespec',
                        'Elixir.Kernel.Utils','Elixir.KeyError',
                        'Elixir.Keyword','Elixir.List','Elixir.List.Chars',
                        'Elixir.List.Chars.Atom',
                        'Elixir.List.Chars.BitString',
                        'Elixir.List.Chars.Float','Elixir.List.Chars.Integer',
                        'Elixir.List.Chars.List','Elixir.Macro',
                        'Elixir.Macro.Env','Elixir.Map','Elixir.MapSet',
                        'Elixir.MatchError','Elixir.Module',
                        'Elixir.Module.LocalsTracker','Elixir.NaiveDateTime',
                        'Elixir.Node','Elixir.OptionParser',
                        'Elixir.OptionParser.ParseError','Elixir.Path',
                        'Elixir.Path.Wildcard','Elixir.Port','Elixir.Process',
                        'Elixir.Protocol','Elixir.Protocol.UndefinedError',
                        'Elixir.Range','Elixir.Record',
                        'Elixir.Record.Extractor','Elixir.Regex',
                        'Elixir.Regex.CompileError','Elixir.RuntimeError',
                        'Elixir.Set','Elixir.Stream','Elixir.Stream.Reducers',
                        'Elixir.String','Elixir.String.Break',
                        'Elixir.String.Casing','Elixir.String.Chars',
                        'Elixir.String.Chars.Atom',
                        'Elixir.String.Chars.BitString',
                        'Elixir.String.Chars.Date',
                        'Elixir.String.Chars.DateTime',
                        'Elixir.String.Chars.Float',
                        'Elixir.String.Chars.Integer',
                        'Elixir.String.Chars.List',
                        'Elixir.String.Chars.NaiveDateTime',
                        'Elixir.String.Chars.Time','Elixir.String.Chars.URI',
                        'Elixir.String.Chars.Version',
                        'Elixir.String.Chars.Version.Requirement',
                        'Elixir.String.Normalizer','Elixir.String.Unicode',
                        'Elixir.StringIO','Elixir.Supervisor',
                        'Elixir.Supervisor.Default','Elixir.Supervisor.Spec',
                        'Elixir.SyntaxError','Elixir.System',
                        'Elixir.SystemLimitError','Elixir.Task',
                        'Elixir.Task.Supervised','Elixir.Task.Supervisor',
                        'Elixir.Time','Elixir.TokenMissingError',
                        'Elixir.TryClauseError','Elixir.Tuple','Elixir.URI',
                        'Elixir.UndefinedFunctionError',
                        'Elixir.UnicodeConversionError','Elixir.Version',
                        'Elixir.Version.InvalidRequirementError',
                        'Elixir.Version.InvalidVersionError',
                        'Elixir.Version.Parser','Elixir.Version.Parser.DSL',
                        'Elixir.Version.Requirement','Elixir.WithClauseError',
                        elixir,elixir_aliases,elixir_bitstring,
                        elixir_bootstrap,elixir_clauses,elixir_code_server,
                        elixir_compiler,elixir_config,elixir_def,
                        elixir_def_defaults,elixir_def_overridable,
                        elixir_dispatch,elixir_env,elixir_errors,elixir_exp,
                        elixir_exp_clauses,elixir_fn,elixir_for,elixir_import,
                        elixir_interpolation,elixir_lexical,elixir_locals,
                        elixir_map,elixir_module,elixir_parser,elixir_quote,
                        elixir_rewrite,elixir_scope,elixir_sup,
                        elixir_tokenizer,elixir_translator,elixir_try,
                        elixir_utils,elixir_with]},
                   {registered,[elixir_config,elixir_code_server]},
                   {applications,[compiler,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[{ansi_enabled,false}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{elixir,[]}}]}]}},
     {apply,
         {application,load,
             [{application,hashids,
                  [{description,
                       "Hashids lets you obfuscate numerical identifiers via reversible mapping."},
                   {vsn,"2.0.2"},
                   {id,[]},
                   {modules,
                       ['Elixir.Hashids','Elixir.Hashids.DecodingError',
                        'Elixir.Hashids.Error','Elixir.Hashids.Helpers']},
                   {registered,[]},
                   {applications,[elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,inflex,
                  [{description,
                       "An Elixir library for handling word inflections.\n"},
                   {vsn,"1.7.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Inflex','Elixir.Inflex.Camelize',
                        'Elixir.Inflex.Ordinalize',
                        'Elixir.Inflex.Parameterize',
                        'Elixir.Inflex.Pluralize','Elixir.Inflex.Underscore']},
                   {registered,[]},
                   {applications,[elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,poison,
                  [{description,
                       "An incredibly fast, pure Elixir JSON library"},
                   {vsn,"2.2.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Poison','Elixir.Poison.Decode',
                        'Elixir.Poison.Decoder','Elixir.Poison.Decoder.Any',
                        'Elixir.Poison.Encode','Elixir.Poison.EncodeError',
                        'Elixir.Poison.Encoder','Elixir.Poison.Encoder.Any',
                        'Elixir.Poison.Encoder.Atom',
                        'Elixir.Poison.Encoder.BitString',
                        'Elixir.Poison.Encoder.Date',
                        'Elixir.Poison.Encoder.DateTime',
                        'Elixir.Poison.Encoder.Float',
                        'Elixir.Poison.Encoder.HashDict',
                        'Elixir.Poison.Encoder.HashSet',
                        'Elixir.Poison.Encoder.Integer',
                        'Elixir.Poison.Encoder.List',
                        'Elixir.Poison.Encoder.Map',
                        'Elixir.Poison.Encoder.MapSet',
                        'Elixir.Poison.Encoder.NaiveDateTime',
                        'Elixir.Poison.Encoder.Range',
                        'Elixir.Poison.Encoder.Stream',
                        'Elixir.Poison.Encoder.Time','Elixir.Poison.Parser',
                        'Elixir.Poison.Pretty','Elixir.Poison.SyntaxError']},
                   {registered,[]},
                   {applications,[elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,logger,
                  [{description,"logger"},
                   {vsn,"1.3.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Logger','Elixir.Logger.App',
                        'Elixir.Logger.Backends.Console',
                        'Elixir.Logger.Config','Elixir.Logger.ErrorHandler',
                        'Elixir.Logger.Formatter','Elixir.Logger.Translator',
                        'Elixir.Logger.Utils','Elixir.Logger.Watcher']},
                   {registered,
                       ['Elixir.Logger','Elixir.Logger.Supervisor',
                        'Elixir.Logger.Watcher']},
                   {applications,[elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,
                       [{level,debug},
                        {utc_log,false},
                        {truncate,8096},
                        {backends,[console]},
                        {translators,[{'Elixir.Logger.Translator',translate}]},
                        {sync_threshold,20},
                        {handle_otp_reports,true},
                        {handle_sasl_reports,false},
                        {compile_time_purge_level,debug},
                        {compile_time_application,nil},
                        {discard_threshold_for_error_logger,500},
                        {translator_inspect_opts,[]},
                        {console,[]}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Logger.App',[]}}]}]}},
     {apply,
         {application,load,
             [{application,mime,
                  [{description,"A MIME type module for Elixir"},
                   {vsn,"1.0.1"},
                   {id,[]},
                   {modules,['Elixir.MIME']},
                   {registered,[]},
                   {applications,[elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,crypto,
                  [{description,"CRYPTO"},
                   {vsn,"3.6.3"},
                   {id,[]},
                   {modules,[crypto,crypto_ec_curves]},
                   {registered,[]},
                   {applications,[stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,plug,
                  [{description,
                       "A specification and conveniences for composable modules between web applications"},
                   {vsn,"1.2.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Collectable.Plug.Conn',
                        'Elixir.Inspect.Plug.Conn','Elixir.Plug',
                        'Elixir.Plug.Adapters.Cowboy',
                        'Elixir.Plug.Adapters.Cowboy.Conn',
                        'Elixir.Plug.Adapters.Cowboy.Handler',
                        'Elixir.Plug.Adapters.Test.Conn',
                        'Elixir.Plug.Adapters.Translator',
                        'Elixir.Plug.BadRequestError','Elixir.Plug.Builder',
                        'Elixir.Plug.CSRFProtection',
                        'Elixir.Plug.CSRFProtection.InvalidCSRFTokenError',
                        'Elixir.Plug.CSRFProtection.InvalidCrossOriginRequestError',
                        'Elixir.Plug.Conn','Elixir.Plug.Conn.Adapter',
                        'Elixir.Plug.Conn.AlreadySentError',
                        'Elixir.Plug.Conn.CookieOverflowError',
                        'Elixir.Plug.Conn.Cookies',
                        'Elixir.Plug.Conn.InvalidHeaderError',
                        'Elixir.Plug.Conn.InvalidQueryError',
                        'Elixir.Plug.Conn.NotSentError',
                        'Elixir.Plug.Conn.Query','Elixir.Plug.Conn.Status',
                        'Elixir.Plug.Conn.Unfetched','Elixir.Plug.Conn.Utils',
                        'Elixir.Plug.Conn.WrapperError','Elixir.Plug.Crypto',
                        'Elixir.Plug.Crypto.KeyGenerator',
                        'Elixir.Plug.Crypto.MessageEncryptor',
                        'Elixir.Plug.Crypto.MessageVerifier',
                        'Elixir.Plug.Debugger','Elixir.Plug.ErrorHandler',
                        'Elixir.Plug.Exception','Elixir.Plug.Exception.Any',
                        'Elixir.Plug.HTML','Elixir.Plug.Head',
                        'Elixir.Plug.Logger','Elixir.Plug.MIME',
                        'Elixir.Plug.MethodOverride','Elixir.Plug.Parsers',
                        'Elixir.Plug.Parsers.BadEncodingError',
                        'Elixir.Plug.Parsers.JSON',
                        'Elixir.Plug.Parsers.MULTIPART',
                        'Elixir.Plug.Parsers.ParseError',
                        'Elixir.Plug.Parsers.RequestTooLargeError',
                        'Elixir.Plug.Parsers.URLENCODED',
                        'Elixir.Plug.Parsers.UnsupportedMediaTypeError',
                        'Elixir.Plug.RequestId','Elixir.Plug.Router',
                        'Elixir.Plug.Router.InvalidSpecError',
                        'Elixir.Plug.Router.Utils','Elixir.Plug.SSL',
                        'Elixir.Plug.Session','Elixir.Plug.Session.COOKIE',
                        'Elixir.Plug.Session.ETS','Elixir.Plug.Session.Store',
                        'Elixir.Plug.Static',
                        'Elixir.Plug.Static.InvalidPathError',
                        'Elixir.Plug.Supervisor','Elixir.Plug.Test',
                        'Elixir.Plug.TimeoutError','Elixir.Plug.Upload',
                        'Elixir.Plug.UploadError']},
                   {registered,[]},
                   {applications,[mime,logger,crypto,elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Plug',[]}}]}]}},
     {apply,
         {application,load,
             [{application,ja_serializer,
                  [{description,
                       "A serialization library implementing the jsonapi.org 1.0 spec suitable for\nuse building JSON APIs in Pheonix and any other Plug based framework or app.\n"},
                   {vsn,"0.11.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.JaSerializer',
                        'Elixir.JaSerializer.AssociationNotLoadedError',
                        'Elixir.JaSerializer.Builder',
                        'Elixir.JaSerializer.Builder.Attribute',
                        'Elixir.JaSerializer.Builder.Included',
                        'Elixir.JaSerializer.Builder.Link',
                        'Elixir.JaSerializer.Builder.Relationship',
                        'Elixir.JaSerializer.Builder.ResourceIdentifier',
                        'Elixir.JaSerializer.Builder.ResourceObject',
                        'Elixir.JaSerializer.Builder.TopLevel',
                        'Elixir.JaSerializer.ContentTypeNegotiation',
                        'Elixir.JaSerializer.DSL',
                        'Elixir.JaSerializer.Deserializer',
                        'Elixir.JaSerializer.EctoErrorSerializer',
                        'Elixir.JaSerializer.ErrorSerializer',
                        'Elixir.JaSerializer.Formatter',
                        'Elixir.JaSerializer.Formatter.Any',
                        'Elixir.JaSerializer.Formatter.Atom',
                        'Elixir.JaSerializer.Formatter.BitString',
                        'Elixir.JaSerializer.Formatter.Decimal',
                        'Elixir.JaSerializer.Formatter.Ecto.Date',
                        'Elixir.JaSerializer.Formatter.Ecto.DateTime',
                        'Elixir.JaSerializer.Formatter.Ecto.Time',
                        'Elixir.JaSerializer.Formatter.Float',
                        'Elixir.JaSerializer.Formatter.Integer',
                        'Elixir.JaSerializer.Formatter.JaSerializer.Builder.Attribute',
                        'Elixir.JaSerializer.Formatter.JaSerializer.Builder.Link',
                        'Elixir.JaSerializer.Formatter.JaSerializer.Builder.Relationship',
                        'Elixir.JaSerializer.Formatter.JaSerializer.Builder.ResourceIdentifier',
                        'Elixir.JaSerializer.Formatter.JaSerializer.Builder.ResourceObject',
                        'Elixir.JaSerializer.Formatter.JaSerializer.Builder.TopLevel',
                        'Elixir.JaSerializer.Formatter.List',
                        'Elixir.JaSerializer.Formatter.Utils',
                        'Elixir.JaSerializer.ParamParser',
                        'Elixir.JaSerializer.ParamParser.Any',
                        'Elixir.JaSerializer.ParamParser.Atom',
                        'Elixir.JaSerializer.ParamParser.BitString',
                        'Elixir.JaSerializer.ParamParser.Float',
                        'Elixir.JaSerializer.ParamParser.Integer',
                        'Elixir.JaSerializer.ParamParser.List',
                        'Elixir.JaSerializer.ParamParser.Map',
                        'Elixir.JaSerializer.ParamParser.Plug.Upload',
                        'Elixir.JaSerializer.ParamParser.Utils',
                        'Elixir.JaSerializer.Params',
                        'Elixir.JaSerializer.PhoenixView',
                        'Elixir.JaSerializer.Relationship',
                        'Elixir.JaSerializer.Relationship.HasMany',
                        'Elixir.JaSerializer.Relationship.HasOne',
                        'Elixir.JaSerializer.Serializer']},
                   {registered,[]},
                   {applications,
                       [inflex,poison,logger,plug,elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,cors_plug,
                  [{description,
                       "An elixir plug that adds CORS headers to requests and responds to\npreflight requests (OPTIONS)\n"},
                   {vsn,"1.1.2"},
                   {id,[]},
                   {modules,['Elixir.CORSPlug']},
                   {registered,[]},
                   {applications,[logger,elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,uuid,
                  [{description,"UUID generator and utilities for Elixir.\n"},
                   {vsn,"1.1.5"},
                   {id,[]},
                   {modules,['Elixir.UUID']},
                   {registered,[]},
                   {applications,[elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,base64url,
                  [{description,"URL safe base64-compatible codec"},
                   {vsn,"0.0.1"},
                   {id,"git"},
                   {modules,[base64url]},
                   {registered,[]},
                   {applications,[stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,asn1,
                  [{description,"The Erlang ASN1 compiler version 4.0.2"},
                   {vsn,"4.0.2"},
                   {id,[]},
                   {modules,[asn1rt,asn1rt_nif]},
                   {registered,[asn1_ns,asn1db]},
                   {applications,[stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,public_key,
                  [{description,"Public key infrastructure"},
                   {vsn,"1.1.1"},
                   {id,[]},
                   {modules,
                       [public_key,pubkey_pem,pubkey_pbe,pubkey_ssh,
                        pubkey_cert,pubkey_cert_records,pubkey_crl,
                        'OTP-PUB-KEY','PKCS-FRAME']},
                   {registered,[]},
                   {applications,[asn1,crypto,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,jose,
                  [{description,
                       "JSON Object Signing and Encryption (JOSE) for Erlang and Elixir."},
                   {vsn,"1.8.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.JOSE','Elixir.JOSE.JWA','Elixir.JOSE.JWE',
                        'Elixir.JOSE.JWK','Elixir.JOSE.JWS','Elixir.JOSE.JWT',
                        'Elixir.JOSE.Poison',
                        'Elixir.JOSE.Poison.LexicalEncode',
                        'Elixir.JOSE.Poison.LexicalEncodeError',
                        'Elixir.JOSE.Poison.LexicalEncoder',
                        'Elixir.JOSE.Poison.LexicalEncoder.Any',
                        'Elixir.JOSE.Poison.LexicalEncoder.Atom',
                        'Elixir.JOSE.Poison.LexicalEncoder.BitString',
                        'Elixir.JOSE.Poison.LexicalEncoder.Date',
                        'Elixir.JOSE.Poison.LexicalEncoder.DateTime',
                        'Elixir.JOSE.Poison.LexicalEncoder.Float',
                        'Elixir.JOSE.Poison.LexicalEncoder.HashDict',
                        'Elixir.JOSE.Poison.LexicalEncoder.HashSet',
                        'Elixir.JOSE.Poison.LexicalEncoder.Integer',
                        'Elixir.JOSE.Poison.LexicalEncoder.List',
                        'Elixir.JOSE.Poison.LexicalEncoder.Map',
                        'Elixir.JOSE.Poison.LexicalEncoder.MapSet',
                        'Elixir.JOSE.Poison.LexicalEncoder.NaiveDateTime',
                        'Elixir.JOSE.Poison.LexicalEncoder.Range',
                        'Elixir.JOSE.Poison.LexicalEncoder.Stream',
                        'Elixir.JOSE.Poison.LexicalEncoder.Time',
                        'Elixir.JOSE.Poison.LexicalPretty',jose,jose_app,
                        jose_block_encryptor,jose_chacha20_poly1305,
                        jose_chacha20_poly1305_crypto,
                        jose_chacha20_poly1305_libsodium,
                        jose_chacha20_poly1305_unsupported,jose_curve25519,
                        jose_curve25519_libdecaf,jose_curve25519_libsodium,
                        jose_curve25519_unsupported,jose_curve448,
                        jose_curve448_libdecaf,jose_curve448_unsupported,
                        jose_json,jose_json_jiffy,jose_json_jsone,
                        jose_json_jsx,jose_json_poison,
                        jose_json_poison_compat_encoder,
                        jose_json_poison_lexical_encoder,
                        jose_json_unsupported,jose_jwa,jose_jwa_aes,
                        jose_jwa_aes_kw,jose_jwa_bench,jose_jwa_chacha20,
                        jose_jwa_chacha20_poly1305,jose_jwa_concat_kdf,
                        jose_jwa_curve25519,jose_jwa_curve448,
                        jose_jwa_ed25519,jose_jwa_ed448,jose_jwa_math,
                        jose_jwa_pkcs1,jose_jwa_pkcs5,jose_jwa_pkcs7,
                        jose_jwa_poly1305,jose_jwa_sha3,jose_jwa_unsupported,
                        jose_jwa_x25519,jose_jwa_x448,jose_jwe,jose_jwe_alg,
                        jose_jwe_alg_aes_kw,jose_jwe_alg_dir,
                        jose_jwe_alg_ecdh_es,jose_jwe_alg_pbes2,
                        jose_jwe_alg_rsa,jose_jwe_enc,jose_jwe_enc_aes,
                        jose_jwe_enc_chacha20_poly1305,jose_jwe_zip,jose_jwk,
                        jose_jwk_kty,jose_jwk_kty_ec,jose_jwk_kty_oct,
                        jose_jwk_kty_okp_ed25519,jose_jwk_kty_okp_ed25519ph,
                        jose_jwk_kty_okp_ed448,jose_jwk_kty_okp_ed448ph,
                        jose_jwk_kty_okp_x25519,jose_jwk_kty_okp_x448,
                        jose_jwk_kty_rsa,jose_jwk_oct,jose_jwk_openssh_key,
                        jose_jwk_pem,jose_jwk_set,jose_jwk_use_enc,
                        jose_jwk_use_sig,jose_jws,jose_jws_alg,
                        jose_jws_alg_ecdsa,jose_jws_alg_eddsa,
                        jose_jws_alg_hmac,jose_jws_alg_none,
                        jose_jws_alg_poly1305,jose_jws_alg_rsa_pkcs1_v1_5,
                        jose_jws_alg_rsa_pss,jose_jwt,jose_server,jose_sha3,
                        jose_sha3_keccakf1600_driver,
                        jose_sha3_keccakf1600_nif,jose_sha3_libdecaf,
                        jose_sha3_unsupported,jose_sup]},
                   {registered,[]},
                   {applications,
                       [base64url,public_key,asn1,crypto,elixir,stdlib,
                        kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{jose_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,guardian,
                  [{description,"Elixir Authentication framework"},
                   {vsn,"0.13.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Guardian','Elixir.Guardian.Channel',
                        'Elixir.Guardian.ClaimValidation',
                        'Elixir.Guardian.Claims','Elixir.Guardian.Hooks',
                        'Elixir.Guardian.Hooks.Default','Elixir.Guardian.JWT',
                        'Elixir.Guardian.Keys','Elixir.Guardian.Permissions',
                        'Elixir.Guardian.Phoenix.Controller',
                        'Elixir.Guardian.Phoenix.Socket',
                        'Elixir.Guardian.Plug',
                        'Elixir.Guardian.Plug.EnsureAuthenticated',
                        'Elixir.Guardian.Plug.EnsureNotAuthenticated',
                        'Elixir.Guardian.Plug.EnsurePermissions',
                        'Elixir.Guardian.Plug.ErrorHandler',
                        'Elixir.Guardian.Plug.LoadResource',
                        'Elixir.Guardian.Plug.VerifyHeader',
                        'Elixir.Guardian.Plug.VerifySession',
                        'Elixir.Guardian.Serializer','Elixir.Guardian.Utils']},
                   {registered,[]},
                   {applications,
                       [uuid,jose,poison,logger,elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,fs,
                  [{description,"VXZ FS Listener"},
                   {vsn,"0.9.1"},
                   {id,[]},
                   {modules,
                       [fs,fs_app,fs_event_bridge,fs_server,fs_sup,fsevents,
                        inotifywait,inotifywait_win32]},
                   {registered,[]},
                   {applications,[stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{fs_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,eex,
                  [{description,"eex"},
                   {vsn,"1.3.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.EEx','Elixir.EEx.Compiler',
                        'Elixir.EEx.Engine','Elixir.EEx.SmartEngine',
                        'Elixir.EEx.SyntaxError','Elixir.EEx.Tokenizer']},
                   {registered,[]},
                   {applications,[elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,phoenix,
                  [{description,
                       "Productive. Reliable. Fast. A productive web framework that\ndoes not compromise speed and maintainability.\n"},
                   {vsn,"1.2.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Mix.Phoenix',
                        'Elixir.Mix.Tasks.Compile.Phoenix',
                        'Elixir.Mix.Tasks.Phoenix.Digest',
                        'Elixir.Mix.Tasks.Phoenix.Gen.Channel',
                        'Elixir.Mix.Tasks.Phoenix.Gen.Html',
                        'Elixir.Mix.Tasks.Phoenix.Gen.Json',
                        'Elixir.Mix.Tasks.Phoenix.Gen.Model',
                        'Elixir.Mix.Tasks.Phoenix.Gen.Presence',
                        'Elixir.Mix.Tasks.Phoenix.Gen.Secret',
                        'Elixir.Mix.Tasks.Phoenix.Routes',
                        'Elixir.Mix.Tasks.Phoenix.Server','Elixir.Phoenix',
                        'Elixir.Phoenix.ActionClauseError',
                        'Elixir.Phoenix.Channel',
                        'Elixir.Phoenix.Channel.Server',
                        'Elixir.Phoenix.ChannelTest',
                        'Elixir.Phoenix.ChannelTest.NoopSerializer',
                        'Elixir.Phoenix.CodeReloader',
                        'Elixir.Phoenix.CodeReloader.Proxy',
                        'Elixir.Phoenix.CodeReloader.Server',
                        'Elixir.Phoenix.Config','Elixir.Phoenix.ConnTest',
                        'Elixir.Phoenix.Controller',
                        'Elixir.Phoenix.Controller.Pipeline',
                        'Elixir.Phoenix.Digester','Elixir.Phoenix.Endpoint',
                        'Elixir.Phoenix.Endpoint.Adapter',
                        'Elixir.Phoenix.Endpoint.CowboyHandler',
                        'Elixir.Phoenix.Endpoint.CowboyWebSocket',
                        'Elixir.Phoenix.Endpoint.Handler',
                        'Elixir.Phoenix.Endpoint.Instrument',
                        'Elixir.Phoenix.Endpoint.RenderErrors',
                        'Elixir.Phoenix.Endpoint.Server',
                        'Elixir.Phoenix.Endpoint.Watcher',
                        'Elixir.Phoenix.Logger',
                        'Elixir.Phoenix.MissingParamError',
                        'Elixir.Phoenix.Naming',
                        'Elixir.Phoenix.NotAcceptableError',
                        'Elixir.Phoenix.Param','Elixir.Phoenix.Param.Any',
                        'Elixir.Phoenix.Param.Atom',
                        'Elixir.Phoenix.Param.BitString',
                        'Elixir.Phoenix.Param.Integer',
                        'Elixir.Phoenix.Param.Map','Elixir.Phoenix.Presence',
                        'Elixir.Phoenix.Router',
                        'Elixir.Phoenix.Router.ConsoleFormatter',
                        'Elixir.Phoenix.Router.Helpers',
                        'Elixir.Phoenix.Router.NoRouteError',
                        'Elixir.Phoenix.Router.Resource',
                        'Elixir.Phoenix.Router.Route',
                        'Elixir.Phoenix.Router.Scope','Elixir.Phoenix.Socket',
                        'Elixir.Phoenix.Socket.Broadcast',
                        'Elixir.Phoenix.Socket.InvalidMessageError',
                        'Elixir.Phoenix.Socket.Message',
                        'Elixir.Phoenix.Socket.Reply',
                        'Elixir.Phoenix.Socket.Transport',
                        'Elixir.Phoenix.Supervisor','Elixir.Phoenix.Template',
                        'Elixir.Phoenix.Template.EExEngine',
                        'Elixir.Phoenix.Template.Engine',
                        'Elixir.Phoenix.Template.ExsEngine',
                        'Elixir.Phoenix.Template.HTML',
                        'Elixir.Phoenix.Template.UndefinedError',
                        'Elixir.Phoenix.Token',
                        'Elixir.Phoenix.Transports.LongPoll',
                        'Elixir.Phoenix.Transports.LongPoll.Server',
                        'Elixir.Phoenix.Transports.LongPoll.Supervisor',
                        'Elixir.Phoenix.Transports.LongPollSerializer',
                        'Elixir.Phoenix.Transports.Serializer',
                        'Elixir.Phoenix.Transports.WebSocket',
                        'Elixir.Phoenix.Transports.WebSocketSerializer',
                        'Elixir.Phoenix.View']},
                   {registered,[]},
                   {applications,
                       [eex,poison,logger,plug,elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,
                       [{stacktrace_depth,nil},
                        {template_engines,[]},
                        {format_encoders,[]},
                        {generators,[]},
                        {filter_parameters,[<<"password">>]},
                        {serve_endpoints,false},
                        {gzippable_exts,
                            [<<".js">>,<<".css">>,<<".txt">>,<<".text">>,
                             <<".html">>,<<".json">>,<<".svg">>]}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Phoenix',[]}}]}]}},
     {apply,
         {application,load,
             [{application,phoenix_live_reload,
                  [{description,
                       "Provides live-reload functionality for Phoenix"},
                   {vsn,"1.0.5"},
                   {id,[]},
                   {modules,
                       ['Elixir.Phoenix.LiveReload.Channel',
                        'Elixir.Phoenix.LiveReloader',
                        'Elixir.Phoenix.LiveReloader.Socket']},
                   {registered,[]},
                   {applications,[fs,logger,phoenix,elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,comeonin,
                  [{description,
                       "Password hashing (bcrypt, pbkdf2_sha512) library for Elixir.\n"},
                   {vsn,"2.5.3"},
                   {id,[]},
                   {modules,
                       ['Elixir.Comeonin','Elixir.Comeonin.Bcrypt',
                        'Elixir.Comeonin.Bcrypt.Base64',
                        'Elixir.Comeonin.Config','Elixir.Comeonin.Otp',
                        'Elixir.Comeonin.Pbkdf2',
                        'Elixir.Comeonin.Pbkdf2.Base64',
                        'Elixir.Comeonin.Tools']},
                   {registered,[]},
                   {applications,[logger,crypto,elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,connection,
                  [{description,
                       "Connection behaviour for connection processes\n"},
                   {vsn,"1.0.4"},
                   {id,[]},
                   {modules,['Elixir.Connection']},
                   {registered,[]},
                   {applications,[elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,db_connection,
                  [{description,
                       "Database connection behaviour for database transactions and connection pooling\n"},
                   {vsn,"1.0.0-rc.5"},
                   {id,[]},
                   {modules,
                       ['Elixir.DBConnection','Elixir.DBConnection.App',
                        'Elixir.DBConnection.Backoff',
                        'Elixir.DBConnection.Connection',
                        'Elixir.DBConnection.ConnectionError',
                        'Elixir.DBConnection.LogEntry',
                        'Elixir.DBConnection.Ownership',
                        'Elixir.DBConnection.Ownership.Manager',
                        'Elixir.DBConnection.Ownership.Pool',
                        'Elixir.DBConnection.Ownership.PoolSupervisor',
                        'Elixir.DBConnection.Ownership.Proxy',
                        'Elixir.DBConnection.Ownership.ProxySupervisor',
                        'Elixir.DBConnection.OwnershipError',
                        'Elixir.DBConnection.Pool',
                        'Elixir.DBConnection.Poolboy',
                        'Elixir.DBConnection.Poolboy.Worker',
                        'Elixir.DBConnection.Query',
                        'Elixir.DBConnection.Sojourn',
                        'Elixir.DBConnection.Sojourn.Broker',
                        'Elixir.DBConnection.Sojourn.Pool',
                        'Elixir.DBConnection.Sojourn.Regulator',
                        'Elixir.DBConnection.Sojourn.Starter',
                        'Elixir.DBConnection.Sojourn.Supervisor',
                        'Elixir.DBConnection.SojournError',
                        'Elixir.DBConnection.Task',
                        'Elixir.DBConnection.Watcher']},
                   {registered,[]},
                   {applications,[connection,logger,elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.DBConnection.App',[]}}]}]}},
     {apply,
         {application,load,
             [{application,decimal,
                  [{description,
                       "Arbitrary precision decimal arithmetic for Elixir."},
                   {vsn,"1.2.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Decimal','Elixir.Decimal.Context',
                        'Elixir.Decimal.Error','Elixir.Inspect.Decimal',
                        'Elixir.String.Chars.Decimal']},
                   {registered,[]},
                   {applications,[elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,mariaex,
                  [{description,
                       "Pure elixir database driver for MariaDB / MySQL."},
                   {vsn,"0.7.8"},
                   {id,[]},
                   {modules,
                       ['Elixir.DBConnection.Query.Mariaex.Query',
                        'Elixir.Mariaex','Elixir.Mariaex.Cache',
                        'Elixir.Mariaex.Coder','Elixir.Mariaex.Coder.Utils',
                        'Elixir.Mariaex.Column','Elixir.Mariaex.Connection',
                        'Elixir.Mariaex.Connection.Ssl',
                        'Elixir.Mariaex.Connection.Tcp',
                        'Elixir.Mariaex.Error','Elixir.Mariaex.LruCache',
                        'Elixir.Mariaex.Messages','Elixir.Mariaex.Protocol',
                        'Elixir.Mariaex.ProtocolHelper',
                        'Elixir.Mariaex.Query','Elixir.Mariaex.Result',
                        'Elixir.String.Chars.Mariaex.Query']},
                   {registered,[]},
                   {applications,
                       [db_connection,decimal,logger,crypto,elixir,stdlib,
                        kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,poolboy,
                  [{description,"A hunky Erlang worker pool factory"},
                   {vsn,"1.5.1"},
                   {id,[]},
                   {modules,[poolboy,poolboy_sup,poolboy_worker]},
                   {registered,[poolboy]},
                   {applications,[stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,ecto,
                  [{description,
                       "A database wrapper and language integrated query for Elixir.\n"},
                   {vsn,"2.0.5"},
                   {id,[]},
                   {modules,
                       ['Elixir.Ecto','Elixir.Ecto.Adapter',
                        'Elixir.Ecto.Adapter.Migration',
                        'Elixir.Ecto.Adapter.Storage',
                        'Elixir.Ecto.Adapter.Structure',
                        'Elixir.Ecto.Adapter.Transaction',
                        'Elixir.Ecto.Adapters.MySQL',
                        'Elixir.Ecto.Adapters.MySQL.Connection',
                        'Elixir.Ecto.Adapters.Postgres',
                        'Elixir.Ecto.Adapters.SQL',
                        'Elixir.Ecto.Adapters.SQL.Connection',
                        'Elixir.Ecto.Adapters.SQL.Sandbox',
                        'Elixir.Ecto.Adapters.SQL.Sandbox.Connection',
                        'Elixir.Ecto.Adapters.SQL.Sandbox.Pool',
                        'Elixir.Ecto.Application','Elixir.Ecto.Association',
                        'Elixir.Ecto.Association.BelongsTo',
                        'Elixir.Ecto.Association.Has',
                        'Elixir.Ecto.Association.HasThrough',
                        'Elixir.Ecto.Association.ManyToMany',
                        'Elixir.Ecto.Association.NotLoaded',
                        'Elixir.Ecto.CastError','Elixir.Ecto.ChangeError',
                        'Elixir.Ecto.Changeset',
                        'Elixir.Ecto.Changeset.Relation',
                        'Elixir.Ecto.ConstraintError','Elixir.Ecto.DataType',
                        'Elixir.Ecto.DataType.Any',
                        'Elixir.Ecto.DataType.Ecto.Date',
                        'Elixir.Ecto.DataType.Ecto.DateTime',
                        'Elixir.Ecto.DataType.Ecto.Time',
                        'Elixir.Ecto.DataType.List','Elixir.Ecto.Date',
                        'Elixir.Ecto.DateTime','Elixir.Ecto.DateTime.Utils',
                        'Elixir.Ecto.Embedded',
                        'Elixir.Ecto.InvalidChangesetError',
                        'Elixir.Ecto.InvalidURLError','Elixir.Ecto.LogEntry',
                        'Elixir.Ecto.Migration',
                        'Elixir.Ecto.Migration.Constraint',
                        'Elixir.Ecto.Migration.Index',
                        'Elixir.Ecto.Migration.Reference',
                        'Elixir.Ecto.Migration.Runner',
                        'Elixir.Ecto.Migration.SchemaMigration',
                        'Elixir.Ecto.Migration.Supervisor',
                        'Elixir.Ecto.Migration.Table',
                        'Elixir.Ecto.MigrationError','Elixir.Ecto.Migrator',
                        'Elixir.Ecto.Model','Elixir.Ecto.Multi',
                        'Elixir.Ecto.MultipleResultsError',
                        'Elixir.Ecto.NoPrimaryKeyFieldError',
                        'Elixir.Ecto.NoPrimaryKeyValueError',
                        'Elixir.Ecto.NoResultsError','Elixir.Ecto.Query',
                        'Elixir.Ecto.Query.API','Elixir.Ecto.Query.Builder',
                        'Elixir.Ecto.Query.Builder.Distinct',
                        'Elixir.Ecto.Query.Builder.Filter',
                        'Elixir.Ecto.Query.Builder.From',
                        'Elixir.Ecto.Query.Builder.GroupBy',
                        'Elixir.Ecto.Query.Builder.Join',
                        'Elixir.Ecto.Query.Builder.LimitOffset',
                        'Elixir.Ecto.Query.Builder.Lock',
                        'Elixir.Ecto.Query.Builder.OrderBy',
                        'Elixir.Ecto.Query.Builder.Preload',
                        'Elixir.Ecto.Query.Builder.Select',
                        'Elixir.Ecto.Query.Builder.Update',
                        'Elixir.Ecto.Query.CastError',
                        'Elixir.Ecto.Query.CompileError',
                        'Elixir.Ecto.Query.JoinExpr',
                        'Elixir.Ecto.Query.Planner',
                        'Elixir.Ecto.Query.QueryExpr',
                        'Elixir.Ecto.Query.SelectExpr',
                        'Elixir.Ecto.Query.Tagged','Elixir.Ecto.QueryError',
                        'Elixir.Ecto.Queryable','Elixir.Ecto.Queryable.Atom',
                        'Elixir.Ecto.Queryable.BitString',
                        'Elixir.Ecto.Queryable.Ecto.Query',
                        'Elixir.Ecto.Queryable.Ecto.SubQuery',
                        'Elixir.Ecto.Queryable.Tuple','Elixir.Ecto.Repo',
                        'Elixir.Ecto.Repo.Assoc','Elixir.Ecto.Repo.Preloader',
                        'Elixir.Ecto.Repo.Queryable',
                        'Elixir.Ecto.Repo.Schema',
                        'Elixir.Ecto.Repo.Supervisor','Elixir.Ecto.Schema',
                        'Elixir.Ecto.Schema.Metadata',
                        'Elixir.Ecto.StaleEntryError','Elixir.Ecto.SubQuery',
                        'Elixir.Ecto.SubQueryError','Elixir.Ecto.Time',
                        'Elixir.Ecto.Type','Elixir.Ecto.UUID',
                        'Elixir.Inspect.Ecto.Association.NotLoaded',
                        'Elixir.Inspect.Ecto.Changeset',
                        'Elixir.Inspect.Ecto.Date',
                        'Elixir.Inspect.Ecto.DateTime',
                        'Elixir.Inspect.Ecto.Query',
                        'Elixir.Inspect.Ecto.Schema.Metadata',
                        'Elixir.Inspect.Ecto.Time','Elixir.Mix.Ecto',
                        'Elixir.Mix.Tasks.Ecto',
                        'Elixir.Mix.Tasks.Ecto.Create',
                        'Elixir.Mix.Tasks.Ecto.Drop',
                        'Elixir.Mix.Tasks.Ecto.Dump',
                        'Elixir.Mix.Tasks.Ecto.Gen.Migration',
                        'Elixir.Mix.Tasks.Ecto.Gen.Repo',
                        'Elixir.Mix.Tasks.Ecto.Load',
                        'Elixir.Mix.Tasks.Ecto.Migrate',
                        'Elixir.Mix.Tasks.Ecto.Migrations',
                        'Elixir.Mix.Tasks.Ecto.Rollback',
                        'Elixir.Poison.Encoder.Decimal',
                        'Elixir.Poison.Encoder.Ecto.Association.NotLoaded',
                        'Elixir.Poison.Encoder.Ecto.Date',
                        'Elixir.Poison.Encoder.Ecto.DateTime',
                        'Elixir.Poison.Encoder.Ecto.Time',
                        'Elixir.String.Chars.Ecto.Date',
                        'Elixir.String.Chars.Ecto.DateTime',
                        'Elixir.String.Chars.Ecto.Time']},
                   {registered,[]},
                   {applications,
                       [poolboy,decimal,logger,elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[{json_library,'Elixir.Poison'}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Ecto.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,phoenix_ecto,
                  [{description,"Integration between Phoenix & Ecto"},
                   {vsn,"3.0.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Phoenix.Ecto',
                        'Elixir.Phoenix.Ecto.SQL.Sandbox',
                        'Elixir.Plug.Exception.Ecto.CastError',
                        'Elixir.Plug.Exception.Ecto.NoResultsError',
                        'Elixir.Plug.Exception.Ecto.Query.CastError']},
                   {registered,[]},
                   {applications,[ecto,logger,plug,elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,gettext,
                  [{description,
                       "Internationalization and localization through gettext"},
                   {vsn,"0.11.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Gettext','Elixir.Gettext.Backend',
                        'Elixir.Gettext.Compiler','Elixir.Gettext.Error',
                        'Elixir.Gettext.Extractor',
                        'Elixir.Gettext.ExtractorAgent',
                        'Elixir.Gettext.Fuzzy','Elixir.Gettext.Interpolation',
                        'Elixir.Gettext.Merger','Elixir.Gettext.PO',
                        'Elixir.Gettext.PO.Parser',
                        'Elixir.Gettext.PO.PluralTranslation',
                        'Elixir.Gettext.PO.SyntaxError',
                        'Elixir.Gettext.PO.Tokenizer',
                        'Elixir.Gettext.PO.Translation',
                        'Elixir.Gettext.PO.Translations',
                        'Elixir.Gettext.Plural',
                        'Elixir.Gettext.Plural.UnknownLocaleError',
                        'Elixir.Mix.Tasks.Compile.Gettext',
                        'Elixir.Mix.Tasks.Gettext.Extract',
                        'Elixir.Mix.Tasks.Gettext.Merge',gettext_po_parser]},
                   {registered,[]},
                   {applications,[logger,elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[{default_locale,<<"en">>}]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,cowlib,
                  [{description,
                       "Support library for manipulating Web protocols."},
                   {vsn,"1.0.2"},
                   {id,"git"},
                   {modules,
                       [cow_cookie,cow_date,cow_http,cow_http_hd,cow_http_te,
                        cow_mimetypes,cow_multipart,cow_qs,cow_spdy]},
                   {registered,[]},
                   {applications,[crypto,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,ranch,
                  [{description,"Socket acceptor pool for TCP protocols."},
                   {vsn,"1.2.1"},
                   {id,"git"},
                   {modules,
                       [ranch,ranch_acceptor,ranch_acceptors_sup,ranch_app,
                        ranch_conns_sup,ranch_listener_sup,ranch_protocol,
                        ranch_server,ranch_ssl,ranch_sup,ranch_tcp,
                        ranch_transport]},
                   {registered,[ranch_sup,ranch_server]},
                   {applications,[stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{ranch_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,cowboy,
                  [{description,"Small, fast, modular HTTP server."},
                   {vsn,"1.0.4"},
                   {id,"git"},
                   {modules,
                       [cowboy,cowboy_app,cowboy_bstr,cowboy_clock,
                        cowboy_handler,cowboy_http,cowboy_http_handler,
                        cowboy_loop_handler,cowboy_middleware,cowboy_protocol,
                        cowboy_req,cowboy_rest,cowboy_router,cowboy_spdy,
                        cowboy_static,cowboy_sub_protocol,cowboy_sup,
                        cowboy_websocket,cowboy_websocket_handler]},
                   {registered,[cowboy_clock,cowboy_sup]},
                   {applications,[cowlib,ranch,crypto,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{cowboy_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,phoenix_pubsub,
                  [{description,"Distributed PubSub and Presence platform\n"},
                   {vsn,"1.0.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Phoenix.PubSub',
                        'Elixir.Phoenix.PubSub.BroadcastError',
                        'Elixir.Phoenix.PubSub.GC',
                        'Elixir.Phoenix.PubSub.Local',
                        'Elixir.Phoenix.PubSub.LocalSupervisor',
                        'Elixir.Phoenix.PubSub.PG2',
                        'Elixir.Phoenix.PubSub.PG2Server',
                        'Elixir.Phoenix.PubSub.Supervisor',
                        'Elixir.Phoenix.Tracker',
                        'Elixir.Phoenix.Tracker.Clock',
                        'Elixir.Phoenix.Tracker.DeltaGeneration',
                        'Elixir.Phoenix.Tracker.Replica',
                        'Elixir.Phoenix.Tracker.State']},
                   {registered,[]},
                   {applications,[logger,crypto,elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Phoenix.PubSub.Supervisor',[]}}]}]}},
     {apply,
         {application,load,
             [{application,mirror,
                  [{description,"mirror"},
                   {vsn,"0.0.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Mirror','Elixir.Mirror.AuthErrorHandler',
                        'Elixir.Mirror.ChangesetView',
                        'Elixir.Mirror.Endpoint','Elixir.Mirror.ErrorHelpers',
                        'Elixir.Mirror.ErrorView','Elixir.Mirror.Gettext',
                        'Elixir.Mirror.GuardianSerializer',
                        'Elixir.Mirror.MemberDelegate',
                        'Elixir.Mirror.RegistrationController',
                        'Elixir.Mirror.Repo','Elixir.Mirror.Retrospective',
                        'Elixir.Mirror.RetrospectiveChannel',
                        'Elixir.Mirror.RetrospectiveType',
                        'Elixir.Mirror.RetrospectiveUser',
                        'Elixir.Mirror.Router','Elixir.Mirror.Router.Helpers',
                        'Elixir.Mirror.SessionController',
                        'Elixir.Mirror.Team','Elixir.Mirror.TeamAdmin',
                        'Elixir.Mirror.TeamAdminController',
                        'Elixir.Mirror.TeamAdminView',
                        'Elixir.Mirror.TeamChannel',
                        'Elixir.Mirror.TeamController',
                        'Elixir.Mirror.TeamView','Elixir.Mirror.User',
                        'Elixir.Mirror.UserController',
                        'Elixir.Mirror.UserHelper','Elixir.Mirror.UserSocket',
                        'Elixir.Mirror.UserTeam',
                        'Elixir.Mirror.UserTeamController',
                        'Elixir.Mirror.UserTeamView','Elixir.Mirror.UserView',
                        'Elixir.Mirror.Web']},
                   {registered,[]},
                   {applications,
                       [hashids,ja_serializer,cors_plug,guardian,
                        phoenix_live_reload,comeonin,mariaex,phoenix_ecto,
                        gettext,cowboy,phoenix_pubsub,logger,phoenix,elixir,
                        stdlib,kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Mirror',[]}}]}]}},
     {apply,
         {application,load,
             [{application,iex,
                  [{description,"iex"},
                   {vsn,"1.3.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.IEx','Elixir.IEx.App',
                        'Elixir.IEx.Autocomplete','Elixir.IEx.CLI',
                        'Elixir.IEx.Config','Elixir.IEx.Evaluator',
                        'Elixir.IEx.Helpers','Elixir.IEx.History',
                        'Elixir.IEx.History.State','Elixir.IEx.Info',
                        'Elixir.IEx.Info.Any','Elixir.IEx.Info.Atom',
                        'Elixir.IEx.Info.BitString','Elixir.IEx.Info.Float',
                        'Elixir.IEx.Info.Function','Elixir.IEx.Info.Integer',
                        'Elixir.IEx.Info.List','Elixir.IEx.Info.Map',
                        'Elixir.IEx.Info.PID','Elixir.IEx.Info.Port',
                        'Elixir.IEx.Info.Reference','Elixir.IEx.Info.Tuple',
                        'Elixir.IEx.Introspection','Elixir.IEx.Remsh',
                        'Elixir.IEx.Server','Elixir.IEx.State']},
                   {registered,['Elixir.IEx.Supervisor','Elixir.IEx.Config']},
                   {applications,[elixir,stdlib,kernel]},
                   {included_applications,[]},
                   {env,
                       [{autocomplete_server,'Elixir.IEx.Server'},
                        {colors,[]},
                        {inspect,[]},
                        {history_size,20},
                        {default_prompt,<<"%prefix(%counter)>">>},
                        {alive_prompt,<<"%prefix(%node)%counter>">>}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.IEx.App',[]}}]}]}},
     {apply,
         {application,load,
             [{application,sasl,
                  [{description,"SASL  CXC 138 11"},
                   {vsn,"2.7"},
                   {id,[]},
                   {modules,
                       [sasl,alarm_handler,format_lib_supp,misc_supp,overload,
                        rb,rb_format_supp,release_handler,release_handler_1,
                        erlsrv,sasl_report,sasl_report_tty_h,
                        sasl_report_file_h,si,si_sasl_supp,systools,
                        systools_make,systools_rc,systools_relup,
                        systools_lib]},
                   {registered,
                       [sasl_sup,alarm_handler,overload,release_handler]},
                   {applications,[stdlib,kernel]},
                   {included_applications,[]},
                   {env,[{sasl_error_logger,tty},{errlog_type,all}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{sasl,[]}}]}]}},
     {progress,applications_loaded},
     {apply,{application,start_boot,[kernel,permanent]}},
     {apply,{application,start_boot,[stdlib,permanent]}},
     {apply,{application,start_boot,[compiler,permanent]}},
     {apply,{application,start_boot,[elixir,permanent]}},
     {apply,{application,start_boot,[hashids,permanent]}},
     {apply,{application,start_boot,[inflex,permanent]}},
     {apply,{application,start_boot,[poison,permanent]}},
     {apply,{application,start_boot,[logger,permanent]}},
     {apply,{application,start_boot,[mime,permanent]}},
     {apply,{application,start_boot,[crypto,permanent]}},
     {apply,{application,start_boot,[plug,permanent]}},
     {apply,{application,start_boot,[ja_serializer,permanent]}},
     {apply,{application,start_boot,[cors_plug,permanent]}},
     {apply,{application,start_boot,[uuid,permanent]}},
     {apply,{application,start_boot,[base64url,permanent]}},
     {apply,{application,start_boot,[asn1,permanent]}},
     {apply,{application,start_boot,[public_key,permanent]}},
     {apply,{application,start_boot,[jose,permanent]}},
     {apply,{application,start_boot,[guardian,permanent]}},
     {apply,{application,start_boot,[fs,permanent]}},
     {apply,{application,start_boot,[eex,permanent]}},
     {apply,{application,start_boot,[phoenix,permanent]}},
     {apply,{application,start_boot,[phoenix_live_reload,permanent]}},
     {apply,{application,start_boot,[comeonin,permanent]}},
     {apply,{application,start_boot,[connection,permanent]}},
     {apply,{application,start_boot,[db_connection,permanent]}},
     {apply,{application,start_boot,[decimal,permanent]}},
     {apply,{application,start_boot,[mariaex,permanent]}},
     {apply,{application,start_boot,[poolboy,permanent]}},
     {apply,{application,start_boot,[ecto,permanent]}},
     {apply,{application,start_boot,[phoenix_ecto,permanent]}},
     {apply,{application,start_boot,[gettext,permanent]}},
     {apply,{application,start_boot,[cowlib,permanent]}},
     {apply,{application,start_boot,[ranch,permanent]}},
     {apply,{application,start_boot,[cowboy,permanent]}},
     {apply,{application,start_boot,[phoenix_pubsub,permanent]}},
     {apply,{application,start_boot,[mirror,permanent]}},
     {apply,{application,start_boot,[iex,permanent]}},
     {apply,{application,start_boot,[sasl,permanent]}},
     {apply,{c,erlangrc,[]}},
     {progress,started}]}.
